// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/state_datas.proto

#include "proto/state_datas.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fstate_5fdatas_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BatteryState_proto_2fstate_5fdatas_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fstate_5fdatas_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BodyLocation_proto_2fstate_5fdatas_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fstate_5fdatas_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GlobalLocation_proto_2fstate_5fdatas_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fstate_5fdatas_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IMUState_proto_2fstate_5fdatas_2eproto;
namespace quadruped {
class BatteryStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatteryState> _instance;
} _BatteryState_default_instance_;
class IMUStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IMUState> _instance;
} _IMUState_default_instance_;
class GlobalLocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalLocation> _instance;
} _GlobalLocation_default_instance_;
class BodyLocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BodyLocation> _instance;
} _BodyLocation_default_instance_;
class StateDatasDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateDatas> _instance;
} _StateDatas_default_instance_;
}  // namespace quadruped
static void InitDefaultsscc_info_BatteryState_proto_2fstate_5fdatas_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quadruped::_BatteryState_default_instance_;
    new (ptr) ::quadruped::BatteryState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BatteryState_proto_2fstate_5fdatas_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BatteryState_proto_2fstate_5fdatas_2eproto}, {}};

static void InitDefaultsscc_info_BodyLocation_proto_2fstate_5fdatas_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quadruped::_BodyLocation_default_instance_;
    new (ptr) ::quadruped::BodyLocation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BodyLocation_proto_2fstate_5fdatas_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BodyLocation_proto_2fstate_5fdatas_2eproto}, {}};

static void InitDefaultsscc_info_GlobalLocation_proto_2fstate_5fdatas_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quadruped::_GlobalLocation_default_instance_;
    new (ptr) ::quadruped::GlobalLocation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GlobalLocation_proto_2fstate_5fdatas_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GlobalLocation_proto_2fstate_5fdatas_2eproto}, {}};

static void InitDefaultsscc_info_IMUState_proto_2fstate_5fdatas_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quadruped::_IMUState_default_instance_;
    new (ptr) ::quadruped::IMUState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IMUState_proto_2fstate_5fdatas_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IMUState_proto_2fstate_5fdatas_2eproto}, {}};

static void InitDefaultsscc_info_StateDatas_proto_2fstate_5fdatas_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quadruped::_StateDatas_default_instance_;
    new (ptr) ::quadruped::StateDatas();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_StateDatas_proto_2fstate_5fdatas_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_StateDatas_proto_2fstate_5fdatas_2eproto}, {
      &scc_info_BatteryState_proto_2fstate_5fdatas_2eproto.base,
      &scc_info_IMUState_proto_2fstate_5fdatas_2eproto.base,
      &scc_info_GlobalLocation_proto_2fstate_5fdatas_2eproto.base,
      &scc_info_BodyLocation_proto_2fstate_5fdatas_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fstate_5fdatas_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fstate_5fdatas_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fstate_5fdatas_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fstate_5fdatas_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::quadruped::BatteryState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quadruped::BatteryState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quadruped::BatteryState, status_),
  PROTOBUF_FIELD_OFFSET(::quadruped::BatteryState, soc_),
  PROTOBUF_FIELD_OFFSET(::quadruped::BatteryState, current_),
  PROTOBUF_FIELD_OFFSET(::quadruped::BatteryState, cycle_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::quadruped::IMUState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quadruped::IMUState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quadruped::IMUState, quaternion_),
  PROTOBUF_FIELD_OFFSET(::quadruped::IMUState, gyroscope_),
  PROTOBUF_FIELD_OFFSET(::quadruped::IMUState, accelerometer_),
  PROTOBUF_FIELD_OFFSET(::quadruped::IMUState, rpy_),
  PROTOBUF_FIELD_OFFSET(::quadruped::IMUState, temperature_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::quadruped::GlobalLocation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quadruped::GlobalLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quadruped::GlobalLocation, position_),
  PROTOBUF_FIELD_OFFSET(::quadruped::GlobalLocation, velocity_),
  PROTOBUF_FIELD_OFFSET(::quadruped::GlobalLocation, yaw_speed_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::quadruped::BodyLocation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quadruped::BodyLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quadruped::BodyLocation, foot_force_),
  PROTOBUF_FIELD_OFFSET(::quadruped::BodyLocation, body_height_),
  PROTOBUF_FIELD_OFFSET(::quadruped::BodyLocation, foot_position_body_),
  PROTOBUF_FIELD_OFFSET(::quadruped::BodyLocation, foot_speed_body_),
  ~0u,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::quadruped::StateDatas, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::quadruped::StateDatas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::quadruped::StateDatas, obstacle_avoid_mode_),
  PROTOBUF_FIELD_OFFSET(::quadruped::StateDatas, sport_mode_),
  PROTOBUF_FIELD_OFFSET(::quadruped::StateDatas, high_level_mode_),
  PROTOBUF_FIELD_OFFSET(::quadruped::StateDatas, foot_raise_height_),
  PROTOBUF_FIELD_OFFSET(::quadruped::StateDatas, gait_type_),
  PROTOBUF_FIELD_OFFSET(::quadruped::StateDatas, battery_state_),
  PROTOBUF_FIELD_OFFSET(::quadruped::StateDatas, imu_state_),
  PROTOBUF_FIELD_OFFSET(::quadruped::StateDatas, global_location_),
  PROTOBUF_FIELD_OFFSET(::quadruped::StateDatas, body_location_),
  5,
  0,
  6,
  7,
  8,
  1,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::quadruped::BatteryState)},
  { 13, 23, sizeof(::quadruped::IMUState)},
  { 28, 36, sizeof(::quadruped::GlobalLocation)},
  { 39, 48, sizeof(::quadruped::BodyLocation)},
  { 52, 66, sizeof(::quadruped::StateDatas)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quadruped::_BatteryState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quadruped::_IMUState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quadruped::_GlobalLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quadruped::_BodyLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::quadruped::_StateDatas_default_instance_),
};

const char descriptor_table_protodef_proto_2fstate_5fdatas_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027proto/state_datas.proto\022\tquadruped\"K\n\014"
  "BatteryState\022\016\n\006status\030\001 \001(\005\022\013\n\003soc\030\002 \001("
  "\005\022\017\n\007current\030\003 \001(\005\022\r\n\005cycle\030\004 \001(\005\"z\n\010IMU"
  "State\022\026\n\nquaternion\030\001 \003(\002B\002\020\001\022\025\n\tgyrosco"
  "pe\030\002 \003(\002B\002\020\001\022\031\n\raccelerometer\030\003 \003(\002B\002\020\001\022"
  "\017\n\003rpy\030\004 \003(\002B\002\020\001\022\023\n\013temperature\030\005 \001(\005\"O\n"
  "\016GlobalLocation\022\024\n\010position\030\001 \003(\002B\002\020\001\022\024\n"
  "\010velocity\030\002 \003(\002B\002\020\001\022\021\n\tyaw_speed\030\003 \001(\002\"x"
  "\n\014BodyLocation\022\026\n\nfoot_force\030\001 \003(\005B\002\020\001\022\023"
  "\n\013body_height\030\002 \001(\002\022\036\n\022foot_position_bod"
  "y\030\003 \003(\002B\002\020\001\022\033\n\017foot_speed_body\030\004 \003(\002B\002\020\001"
  "\"\330\002\n\nStateDatas\022\"\n\023obstacle_avoid_mode\030\001"
  " \001(\010:\005false\022\032\n\nsport_mode\030\002 \001(\t:\006normal\022"
  "\032\n\017high_level_mode\030\003 \001(\005:\0010\022\034\n\021foot_rais"
  "e_height\030\005 \001(\002:\0010\022\024\n\tgait_type\030\006 \001(\005:\0010\022"
  ".\n\rbattery_state\030\007 \001(\0132\027.quadruped.Batte"
  "ryState\022&\n\timu_state\030\010 \001(\0132\023.quadruped.I"
  "MUState\0222\n\017global_location\030\t \001(\0132\031.quadr"
  "uped.GlobalLocation\022.\n\rbody_location\030\n \001"
  "(\0132\027.quadruped.BodyLocation"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fstate_5fdatas_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fstate_5fdatas_2eproto_sccs[5] = {
  &scc_info_BatteryState_proto_2fstate_5fdatas_2eproto.base,
  &scc_info_BodyLocation_proto_2fstate_5fdatas_2eproto.base,
  &scc_info_GlobalLocation_proto_2fstate_5fdatas_2eproto.base,
  &scc_info_IMUState_proto_2fstate_5fdatas_2eproto.base,
  &scc_info_StateDatas_proto_2fstate_5fdatas_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fstate_5fdatas_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fstate_5fdatas_2eproto = {
  false, false, descriptor_table_protodef_proto_2fstate_5fdatas_2eproto, "proto/state_datas.proto", 787,
  &descriptor_table_proto_2fstate_5fdatas_2eproto_once, descriptor_table_proto_2fstate_5fdatas_2eproto_sccs, descriptor_table_proto_2fstate_5fdatas_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_proto_2fstate_5fdatas_2eproto::offsets,
  file_level_metadata_proto_2fstate_5fdatas_2eproto, 5, file_level_enum_descriptors_proto_2fstate_5fdatas_2eproto, file_level_service_descriptors_proto_2fstate_5fdatas_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fstate_5fdatas_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fstate_5fdatas_2eproto)), true);
namespace quadruped {

// ===================================================================

class BatteryState::_Internal {
 public:
  using HasBits = decltype(std::declval<BatteryState>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_soc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_current(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cycle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

BatteryState::BatteryState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:quadruped.BatteryState)
}
BatteryState::BatteryState(const BatteryState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&cycle_) -
    reinterpret_cast<char*>(&status_)) + sizeof(cycle_));
  // @@protoc_insertion_point(copy_constructor:quadruped.BatteryState)
}

void BatteryState::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&cycle_) -
      reinterpret_cast<char*>(&status_)) + sizeof(cycle_));
}

BatteryState::~BatteryState() {
  // @@protoc_insertion_point(destructor:quadruped.BatteryState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BatteryState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BatteryState::ArenaDtor(void* object) {
  BatteryState* _this = reinterpret_cast< BatteryState* >(object);
  (void)_this;
}
void BatteryState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatteryState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatteryState& BatteryState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatteryState_proto_2fstate_5fdatas_2eproto.base);
  return *internal_default_instance();
}


void BatteryState::Clear() {
// @@protoc_insertion_point(message_clear_start:quadruped.BatteryState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cycle_) -
        reinterpret_cast<char*>(&status_)) + sizeof(cycle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatteryState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 soc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_soc(&has_bits);
          soc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 current = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_current(&has_bits);
          current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cycle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_cycle(&has_bits);
          cycle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatteryState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quadruped.BatteryState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // optional int32 soc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_soc(), target);
  }

  // optional int32 current = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_current(), target);
  }

  // optional int32 cycle = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_cycle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quadruped.BatteryState)
  return target;
}

size_t BatteryState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quadruped.BatteryState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_status());
    }

    // optional int32 soc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_soc());
    }

    // optional int32 current = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_current());
    }

    // optional int32 cycle = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_cycle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatteryState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quadruped.BatteryState)
  GOOGLE_DCHECK_NE(&from, this);
  const BatteryState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatteryState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quadruped.BatteryState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quadruped.BatteryState)
    MergeFrom(*source);
  }
}

void BatteryState::MergeFrom(const BatteryState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quadruped.BatteryState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000002u) {
      soc_ = from.soc_;
    }
    if (cached_has_bits & 0x00000004u) {
      current_ = from.current_;
    }
    if (cached_has_bits & 0x00000008u) {
      cycle_ = from.cycle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BatteryState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quadruped.BatteryState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatteryState::CopyFrom(const BatteryState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quadruped.BatteryState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatteryState::IsInitialized() const {
  return true;
}

void BatteryState::InternalSwap(BatteryState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatteryState, cycle_)
      + sizeof(BatteryState::cycle_)
      - PROTOBUF_FIELD_OFFSET(BatteryState, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BatteryState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IMUState::_Internal {
 public:
  using HasBits = decltype(std::declval<IMUState>()._has_bits_);
  static void set_has_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IMUState::IMUState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  quaternion_(arena),
  gyroscope_(arena),
  accelerometer_(arena),
  rpy_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:quadruped.IMUState)
}
IMUState::IMUState(const IMUState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      quaternion_(from.quaternion_),
      gyroscope_(from.gyroscope_),
      accelerometer_(from.accelerometer_),
      rpy_(from.rpy_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  temperature_ = from.temperature_;
  // @@protoc_insertion_point(copy_constructor:quadruped.IMUState)
}

void IMUState::SharedCtor() {
  temperature_ = 0;
}

IMUState::~IMUState() {
  // @@protoc_insertion_point(destructor:quadruped.IMUState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IMUState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IMUState::ArenaDtor(void* object) {
  IMUState* _this = reinterpret_cast< IMUState* >(object);
  (void)_this;
}
void IMUState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMUState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IMUState& IMUState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IMUState_proto_2fstate_5fdatas_2eproto.base);
  return *internal_default_instance();
}


void IMUState::Clear() {
// @@protoc_insertion_point(message_clear_start:quadruped.IMUState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quaternion_.Clear();
  gyroscope_.Clear();
  accelerometer_.Clear();
  rpy_.Clear();
  temperature_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMUState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float quaternion = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_quaternion(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_quaternion(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float gyroscope = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_gyroscope(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_gyroscope(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float accelerometer = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_accelerometer(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_accelerometer(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float rpy = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_rpy(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_rpy(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 temperature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_temperature(&has_bits);
          temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMUState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quadruped.IMUState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float quaternion = 1 [packed = true];
  if (this->_internal_quaternion_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_quaternion(), target);
  }

  // repeated float gyroscope = 2 [packed = true];
  if (this->_internal_gyroscope_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_gyroscope(), target);
  }

  // repeated float accelerometer = 3 [packed = true];
  if (this->_internal_accelerometer_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_accelerometer(), target);
  }

  // repeated float rpy = 4 [packed = true];
  if (this->_internal_rpy_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_rpy(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 temperature = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_temperature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quadruped.IMUState)
  return target;
}

size_t IMUState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quadruped.IMUState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float quaternion = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_quaternion_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _quaternion_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float gyroscope = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_gyroscope_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _gyroscope_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float accelerometer = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_accelerometer_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _accelerometer_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float rpy = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rpy_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rpy_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional int32 temperature = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_temperature());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMUState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quadruped.IMUState)
  GOOGLE_DCHECK_NE(&from, this);
  const IMUState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IMUState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quadruped.IMUState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quadruped.IMUState)
    MergeFrom(*source);
  }
}

void IMUState::MergeFrom(const IMUState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quadruped.IMUState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quaternion_.MergeFrom(from.quaternion_);
  gyroscope_.MergeFrom(from.gyroscope_);
  accelerometer_.MergeFrom(from.accelerometer_);
  rpy_.MergeFrom(from.rpy_);
  if (from._internal_has_temperature()) {
    _internal_set_temperature(from._internal_temperature());
  }
}

void IMUState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quadruped.IMUState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMUState::CopyFrom(const IMUState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quadruped.IMUState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUState::IsInitialized() const {
  return true;
}

void IMUState::InternalSwap(IMUState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  quaternion_.InternalSwap(&other->quaternion_);
  gyroscope_.InternalSwap(&other->gyroscope_);
  accelerometer_.InternalSwap(&other->accelerometer_);
  rpy_.InternalSwap(&other->rpy_);
  swap(temperature_, other->temperature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IMUState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GlobalLocation::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalLocation>()._has_bits_);
  static void set_has_yaw_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GlobalLocation::GlobalLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  position_(arena),
  velocity_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:quadruped.GlobalLocation)
}
GlobalLocation::GlobalLocation(const GlobalLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      position_(from.position_),
      velocity_(from.velocity_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  yaw_speed_ = from.yaw_speed_;
  // @@protoc_insertion_point(copy_constructor:quadruped.GlobalLocation)
}

void GlobalLocation::SharedCtor() {
  yaw_speed_ = 0;
}

GlobalLocation::~GlobalLocation() {
  // @@protoc_insertion_point(destructor:quadruped.GlobalLocation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GlobalLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GlobalLocation::ArenaDtor(void* object) {
  GlobalLocation* _this = reinterpret_cast< GlobalLocation* >(object);
  (void)_this;
}
void GlobalLocation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GlobalLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalLocation& GlobalLocation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalLocation_proto_2fstate_5fdatas_2eproto.base);
  return *internal_default_instance();
}


void GlobalLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:quadruped.GlobalLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  velocity_.Clear();
  yaw_speed_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlobalLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float position = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_position(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_position(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float velocity = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_velocity(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_velocity(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float yaw_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_yaw_speed(&has_bits);
          yaw_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GlobalLocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quadruped.GlobalLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float position = 1 [packed = true];
  if (this->_internal_position_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_position(), target);
  }

  // repeated float velocity = 2 [packed = true];
  if (this->_internal_velocity_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_velocity(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float yaw_speed = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quadruped.GlobalLocation)
  return target;
}

size_t GlobalLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quadruped.GlobalLocation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float position = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_position_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _position_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float velocity = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_velocity_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _velocity_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional float yaw_speed = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalLocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quadruped.GlobalLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const GlobalLocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GlobalLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quadruped.GlobalLocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quadruped.GlobalLocation)
    MergeFrom(*source);
  }
}

void GlobalLocation::MergeFrom(const GlobalLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quadruped.GlobalLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  velocity_.MergeFrom(from.velocity_);
  if (from._internal_has_yaw_speed()) {
    _internal_set_yaw_speed(from._internal_yaw_speed());
  }
}

void GlobalLocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quadruped.GlobalLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalLocation::CopyFrom(const GlobalLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quadruped.GlobalLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalLocation::IsInitialized() const {
  return true;
}

void GlobalLocation::InternalSwap(GlobalLocation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  position_.InternalSwap(&other->position_);
  velocity_.InternalSwap(&other->velocity_);
  swap(yaw_speed_, other->yaw_speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalLocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BodyLocation::_Internal {
 public:
  using HasBits = decltype(std::declval<BodyLocation>()._has_bits_);
  static void set_has_body_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BodyLocation::BodyLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  foot_force_(arena),
  foot_position_body_(arena),
  foot_speed_body_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:quadruped.BodyLocation)
}
BodyLocation::BodyLocation(const BodyLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      foot_force_(from.foot_force_),
      foot_position_body_(from.foot_position_body_),
      foot_speed_body_(from.foot_speed_body_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  body_height_ = from.body_height_;
  // @@protoc_insertion_point(copy_constructor:quadruped.BodyLocation)
}

void BodyLocation::SharedCtor() {
  body_height_ = 0;
}

BodyLocation::~BodyLocation() {
  // @@protoc_insertion_point(destructor:quadruped.BodyLocation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BodyLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BodyLocation::ArenaDtor(void* object) {
  BodyLocation* _this = reinterpret_cast< BodyLocation* >(object);
  (void)_this;
}
void BodyLocation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BodyLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BodyLocation& BodyLocation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BodyLocation_proto_2fstate_5fdatas_2eproto.base);
  return *internal_default_instance();
}


void BodyLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:quadruped.BodyLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  foot_force_.Clear();
  foot_position_body_.Clear();
  foot_speed_body_.Clear();
  body_height_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BodyLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 foot_force = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_foot_force(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_foot_force(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float body_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_body_height(&has_bits);
          body_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float foot_position_body = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_foot_position_body(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_foot_position_body(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float foot_speed_body = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_foot_speed_body(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_foot_speed_body(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BodyLocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quadruped.BodyLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 foot_force = 1 [packed = true];
  {
    int byte_size = _foot_force_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_foot_force(), byte_size, target);
    }
  }

  cached_has_bits = _has_bits_[0];
  // optional float body_height = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_body_height(), target);
  }

  // repeated float foot_position_body = 3 [packed = true];
  if (this->_internal_foot_position_body_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_foot_position_body(), target);
  }

  // repeated float foot_speed_body = 4 [packed = true];
  if (this->_internal_foot_speed_body_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_foot_speed_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quadruped.BodyLocation)
  return target;
}

size_t BodyLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quadruped.BodyLocation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 foot_force = 1 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->foot_force_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _foot_force_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float foot_position_body = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_foot_position_body_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _foot_position_body_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float foot_speed_body = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_foot_speed_body_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _foot_speed_body_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional float body_height = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BodyLocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quadruped.BodyLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const BodyLocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BodyLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quadruped.BodyLocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quadruped.BodyLocation)
    MergeFrom(*source);
  }
}

void BodyLocation::MergeFrom(const BodyLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quadruped.BodyLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  foot_force_.MergeFrom(from.foot_force_);
  foot_position_body_.MergeFrom(from.foot_position_body_);
  foot_speed_body_.MergeFrom(from.foot_speed_body_);
  if (from._internal_has_body_height()) {
    _internal_set_body_height(from._internal_body_height());
  }
}

void BodyLocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quadruped.BodyLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BodyLocation::CopyFrom(const BodyLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quadruped.BodyLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BodyLocation::IsInitialized() const {
  return true;
}

void BodyLocation::InternalSwap(BodyLocation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  foot_force_.InternalSwap(&other->foot_force_);
  foot_position_body_.InternalSwap(&other->foot_position_body_);
  foot_speed_body_.InternalSwap(&other->foot_speed_body_);
  swap(body_height_, other->body_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BodyLocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StateDatas::_Internal {
 public:
  using HasBits = decltype(std::declval<StateDatas>()._has_bits_);
  static void set_has_obstacle_avoid_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sport_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_high_level_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_foot_raise_height(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_gait_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::quadruped::BatteryState& battery_state(const StateDatas* msg);
  static void set_has_battery_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::quadruped::IMUState& imu_state(const StateDatas* msg);
  static void set_has_imu_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::quadruped::GlobalLocation& global_location(const StateDatas* msg);
  static void set_has_global_location(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::quadruped::BodyLocation& body_location(const StateDatas* msg);
  static void set_has_body_location(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::quadruped::BatteryState&
StateDatas::_Internal::battery_state(const StateDatas* msg) {
  return *msg->battery_state_;
}
const ::quadruped::IMUState&
StateDatas::_Internal::imu_state(const StateDatas* msg) {
  return *msg->imu_state_;
}
const ::quadruped::GlobalLocation&
StateDatas::_Internal::global_location(const StateDatas* msg) {
  return *msg->global_location_;
}
const ::quadruped::BodyLocation&
StateDatas::_Internal::body_location(const StateDatas* msg) {
  return *msg->body_location_;
}
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString StateDatas::_i_give_permission_to_break_this_code_default_sport_mode_{{{"normal", 6}}, {nullptr}};
StateDatas::StateDatas(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:quadruped.StateDatas)
}
StateDatas::StateDatas(const StateDatas& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sport_mode_.UnsafeSetDefault(nullptr);
  if (from._internal_has_sport_mode()) {
    sport_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, from._internal_sport_mode(), 
      GetArena());
  }
  if (from._internal_has_battery_state()) {
    battery_state_ = new ::quadruped::BatteryState(*from.battery_state_);
  } else {
    battery_state_ = nullptr;
  }
  if (from._internal_has_imu_state()) {
    imu_state_ = new ::quadruped::IMUState(*from.imu_state_);
  } else {
    imu_state_ = nullptr;
  }
  if (from._internal_has_global_location()) {
    global_location_ = new ::quadruped::GlobalLocation(*from.global_location_);
  } else {
    global_location_ = nullptr;
  }
  if (from._internal_has_body_location()) {
    body_location_ = new ::quadruped::BodyLocation(*from.body_location_);
  } else {
    body_location_ = nullptr;
  }
  ::memcpy(&obstacle_avoid_mode_, &from.obstacle_avoid_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&gait_type_) -
    reinterpret_cast<char*>(&obstacle_avoid_mode_)) + sizeof(gait_type_));
  // @@protoc_insertion_point(copy_constructor:quadruped.StateDatas)
}

void StateDatas::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateDatas_proto_2fstate_5fdatas_2eproto.base);
  sport_mode_.UnsafeSetDefault(nullptr);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&battery_state_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&gait_type_) -
      reinterpret_cast<char*>(&battery_state_)) + sizeof(gait_type_));
}

StateDatas::~StateDatas() {
  // @@protoc_insertion_point(destructor:quadruped.StateDatas)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StateDatas::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sport_mode_.DestroyNoArena(nullptr);
  if (this != internal_default_instance()) delete battery_state_;
  if (this != internal_default_instance()) delete imu_state_;
  if (this != internal_default_instance()) delete global_location_;
  if (this != internal_default_instance()) delete body_location_;
}

void StateDatas::ArenaDtor(void* object) {
  StateDatas* _this = reinterpret_cast< StateDatas* >(object);
  (void)_this;
}
void StateDatas::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StateDatas::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateDatas& StateDatas::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateDatas_proto_2fstate_5fdatas_2eproto.base);
  return *internal_default_instance();
}


void StateDatas::Clear() {
// @@protoc_insertion_point(message_clear_start:quadruped.StateDatas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      sport_mode_.ClearToDefault(::quadruped::StateDatas::_i_give_permission_to_break_this_code_default_sport_mode_, GetArena());
       }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(battery_state_ != nullptr);
      battery_state_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(imu_state_ != nullptr);
      imu_state_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(global_location_ != nullptr);
      global_location_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(body_location_ != nullptr);
      body_location_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&obstacle_avoid_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&foot_raise_height_) -
        reinterpret_cast<char*>(&obstacle_avoid_mode_)) + sizeof(foot_raise_height_));
  }
  gait_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StateDatas::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool obstacle_avoid_mode = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_obstacle_avoid_mode(&has_bits);
          obstacle_avoid_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sport_mode = 2 [default = "normal"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sport_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "quadruped.StateDatas.sport_mode");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 high_level_mode = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_high_level_mode(&has_bits);
          high_level_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float foot_raise_height = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_foot_raise_height(&has_bits);
          foot_raise_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 gait_type = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_gait_type(&has_bits);
          gait_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .quadruped.BatteryState battery_state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_battery_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .quadruped.IMUState imu_state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_imu_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .quadruped.GlobalLocation global_location = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_global_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .quadruped.BodyLocation body_location = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_body_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StateDatas::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:quadruped.StateDatas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool obstacle_avoid_mode = 1 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_obstacle_avoid_mode(), target);
  }

  // optional string sport_mode = 2 [default = "normal"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sport_mode().data(), static_cast<int>(this->_internal_sport_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "quadruped.StateDatas.sport_mode");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sport_mode(), target);
  }

  // optional int32 high_level_mode = 3 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_high_level_mode(), target);
  }

  // optional float foot_raise_height = 5 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_foot_raise_height(), target);
  }

  // optional int32 gait_type = 6 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_gait_type(), target);
  }

  // optional .quadruped.BatteryState battery_state = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::battery_state(this), target, stream);
  }

  // optional .quadruped.IMUState imu_state = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::imu_state(this), target, stream);
  }

  // optional .quadruped.GlobalLocation global_location = 9;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::global_location(this), target, stream);
  }

  // optional .quadruped.BodyLocation body_location = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::body_location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quadruped.StateDatas)
  return target;
}

size_t StateDatas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quadruped.StateDatas)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string sport_mode = 2 [default = "normal"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sport_mode());
    }

    // optional .quadruped.BatteryState battery_state = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *battery_state_);
    }

    // optional .quadruped.IMUState imu_state = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *imu_state_);
    }

    // optional .quadruped.GlobalLocation global_location = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *global_location_);
    }

    // optional .quadruped.BodyLocation body_location = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_location_);
    }

    // optional bool obstacle_avoid_mode = 1 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int32 high_level_mode = 3 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_high_level_mode());
    }

    // optional float foot_raise_height = 5 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  // optional int32 gait_type = 6 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gait_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateDatas::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quadruped.StateDatas)
  GOOGLE_DCHECK_NE(&from, this);
  const StateDatas* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StateDatas>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quadruped.StateDatas)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quadruped.StateDatas)
    MergeFrom(*source);
  }
}

void StateDatas::MergeFrom(const StateDatas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quadruped.StateDatas)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sport_mode(from._internal_sport_mode());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_battery_state()->::quadruped::BatteryState::MergeFrom(from._internal_battery_state());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_imu_state()->::quadruped::IMUState::MergeFrom(from._internal_imu_state());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_global_location()->::quadruped::GlobalLocation::MergeFrom(from._internal_global_location());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_body_location()->::quadruped::BodyLocation::MergeFrom(from._internal_body_location());
    }
    if (cached_has_bits & 0x00000020u) {
      obstacle_avoid_mode_ = from.obstacle_avoid_mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      high_level_mode_ = from.high_level_mode_;
    }
    if (cached_has_bits & 0x00000080u) {
      foot_raise_height_ = from.foot_raise_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_gait_type(from._internal_gait_type());
  }
}

void StateDatas::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quadruped.StateDatas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateDatas::CopyFrom(const StateDatas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quadruped.StateDatas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateDatas::IsInitialized() const {
  return true;
}

void StateDatas::InternalSwap(StateDatas* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sport_mode_.Swap(&other->sport_mode_, nullptr, GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StateDatas, gait_type_)
      + sizeof(StateDatas::gait_type_)
      - PROTOBUF_FIELD_OFFSET(StateDatas, battery_state_)>(
          reinterpret_cast<char*>(&battery_state_),
          reinterpret_cast<char*>(&other->battery_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StateDatas::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace quadruped
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::quadruped::BatteryState* Arena::CreateMaybeMessage< ::quadruped::BatteryState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::quadruped::BatteryState >(arena);
}
template<> PROTOBUF_NOINLINE ::quadruped::IMUState* Arena::CreateMaybeMessage< ::quadruped::IMUState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::quadruped::IMUState >(arena);
}
template<> PROTOBUF_NOINLINE ::quadruped::GlobalLocation* Arena::CreateMaybeMessage< ::quadruped::GlobalLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::quadruped::GlobalLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::quadruped::BodyLocation* Arena::CreateMaybeMessage< ::quadruped::BodyLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::quadruped::BodyLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::quadruped::StateDatas* Arena::CreateMaybeMessage< ::quadruped::StateDatas >(Arena* arena) {
  return Arena::CreateMessageInternal< ::quadruped::StateDatas >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
