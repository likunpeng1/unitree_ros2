// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/state_datas.proto

#include "proto/state_datas.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_proto_2fstate_5fdatas_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fstate_5fdatas_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BatteryState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fstate_5fdatas_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BodyLocation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fstate_5fdatas_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GlobalLocation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fstate_5fdatas_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IMUState;
}  // namespace protobuf_proto_2fstate_5fdatas_2eproto
namespace quadruped {
class BatteryStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BatteryState>
      _instance;
} _BatteryState_default_instance_;
class IMUStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMUState>
      _instance;
} _IMUState_default_instance_;
class GlobalLocationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GlobalLocation>
      _instance;
} _GlobalLocation_default_instance_;
class BodyLocationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BodyLocation>
      _instance;
} _BodyLocation_default_instance_;
class StateDatasDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StateDatas>
      _instance;
} _StateDatas_default_instance_;
}  // namespace quadruped
namespace protobuf_proto_2fstate_5fdatas_2eproto {
static void InitDefaultsBatteryState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quadruped::_BatteryState_default_instance_;
    new (ptr) ::quadruped::BatteryState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quadruped::BatteryState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BatteryState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBatteryState}, {}};

static void InitDefaultsIMUState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quadruped::_IMUState_default_instance_;
    new (ptr) ::quadruped::IMUState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quadruped::IMUState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IMUState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIMUState}, {}};

static void InitDefaultsGlobalLocation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quadruped::_GlobalLocation_default_instance_;
    new (ptr) ::quadruped::GlobalLocation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quadruped::GlobalLocation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GlobalLocation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGlobalLocation}, {}};

static void InitDefaultsBodyLocation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quadruped::_BodyLocation_default_instance_;
    new (ptr) ::quadruped::BodyLocation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quadruped::BodyLocation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BodyLocation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBodyLocation}, {}};

static void InitDefaultsStateDatas() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::quadruped::StateDatas::_i_give_permission_to_break_this_code_default_sport_mode_.DefaultConstruct();
  *::quadruped::StateDatas::_i_give_permission_to_break_this_code_default_sport_mode_.get_mutable() = ::std::string("normal", 6);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::quadruped::StateDatas::_i_give_permission_to_break_this_code_default_sport_mode_.get_mutable());
  {
    void* ptr = &::quadruped::_StateDatas_default_instance_;
    new (ptr) ::quadruped::StateDatas();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quadruped::StateDatas::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_StateDatas =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsStateDatas}, {
      &protobuf_proto_2fstate_5fdatas_2eproto::scc_info_BatteryState.base,
      &protobuf_proto_2fstate_5fdatas_2eproto::scc_info_IMUState.base,
      &protobuf_proto_2fstate_5fdatas_2eproto::scc_info_GlobalLocation.base,
      &protobuf_proto_2fstate_5fdatas_2eproto::scc_info_BodyLocation.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_BatteryState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IMUState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GlobalLocation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BodyLocation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StateDatas.base);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::BatteryState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::BatteryState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::BatteryState, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::BatteryState, soc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::BatteryState, current_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::BatteryState, cycle_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::IMUState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::IMUState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::IMUState, quaternion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::IMUState, gyroscope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::IMUState, accelerometer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::IMUState, rpy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::IMUState, temperature_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::GlobalLocation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::GlobalLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::GlobalLocation, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::GlobalLocation, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::GlobalLocation, yaw_speed_),
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::BodyLocation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::BodyLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::BodyLocation, foot_force_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::BodyLocation, body_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::BodyLocation, foot_position_body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::BodyLocation, foot_speed_body_),
  ~0u,
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::StateDatas, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::StateDatas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::StateDatas, obstacle_avoid_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::StateDatas, sport_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::StateDatas, high_level_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::StateDatas, foot_raise_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::StateDatas, gait_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::StateDatas, battery_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::StateDatas, imu_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::StateDatas, global_location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quadruped::StateDatas, body_location_),
  5,
  0,
  6,
  7,
  8,
  1,
  2,
  3,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::quadruped::BatteryState)},
  { 13, 23, sizeof(::quadruped::IMUState)},
  { 28, 36, sizeof(::quadruped::GlobalLocation)},
  { 39, 48, sizeof(::quadruped::BodyLocation)},
  { 52, 66, sizeof(::quadruped::StateDatas)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::quadruped::_BatteryState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quadruped::_IMUState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quadruped::_GlobalLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quadruped::_BodyLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quadruped::_StateDatas_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "proto/state_datas.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027proto/state_datas.proto\022\tquadruped\"K\n\014"
      "BatteryState\022\016\n\006status\030\001 \001(\005\022\013\n\003soc\030\002 \001("
      "\005\022\017\n\007current\030\003 \001(\005\022\r\n\005cycle\030\004 \001(\005\"z\n\010IMU"
      "State\022\026\n\nquaternion\030\001 \003(\002B\002\020\001\022\025\n\tgyrosco"
      "pe\030\002 \003(\002B\002\020\001\022\031\n\raccelerometer\030\003 \003(\002B\002\020\001\022"
      "\017\n\003rpy\030\004 \003(\002B\002\020\001\022\023\n\013temperature\030\005 \001(\005\"O\n"
      "\016GlobalLocation\022\024\n\010position\030\001 \003(\002B\002\020\001\022\024\n"
      "\010velocity\030\002 \003(\002B\002\020\001\022\021\n\tyaw_speed\030\003 \001(\002\"x"
      "\n\014BodyLocation\022\026\n\nfoot_force\030\001 \003(\005B\002\020\001\022\023"
      "\n\013body_height\030\002 \001(\002\022\036\n\022foot_position_bod"
      "y\030\003 \003(\002B\002\020\001\022\033\n\017foot_speed_body\030\004 \003(\002B\002\020\001"
      "\"\330\002\n\nStateDatas\022\"\n\023obstacle_avoid_mode\030\001"
      " \001(\010:\005false\022\032\n\nsport_mode\030\002 \001(\t:\006normal\022"
      "\032\n\017high_level_mode\030\003 \001(\005:\0010\022\034\n\021foot_rais"
      "e_height\030\005 \001(\002:\0010\022\024\n\tgait_type\030\006 \001(\005:\0010\022"
      ".\n\rbattery_state\030\007 \001(\0132\027.quadruped.Batte"
      "ryState\022&\n\timu_state\030\010 \001(\0132\023.quadruped.I"
      "MUState\0222\n\017global_location\030\t \001(\0132\031.quadr"
      "uped.GlobalLocation\022.\n\rbody_location\030\n \001"
      "(\0132\027.quadruped.BodyLocation"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 787);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/state_datas.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_proto_2fstate_5fdatas_2eproto
namespace quadruped {

// ===================================================================

void BatteryState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatteryState::kStatusFieldNumber;
const int BatteryState::kSocFieldNumber;
const int BatteryState::kCurrentFieldNumber;
const int BatteryState::kCycleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatteryState::BatteryState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fstate_5fdatas_2eproto::scc_info_BatteryState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quadruped.BatteryState)
}
BatteryState::BatteryState(const BatteryState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&cycle_) -
    reinterpret_cast<char*>(&status_)) + sizeof(cycle_));
  // @@protoc_insertion_point(copy_constructor:quadruped.BatteryState)
}

void BatteryState::SharedCtor() {
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cycle_) -
      reinterpret_cast<char*>(&status_)) + sizeof(cycle_));
}

BatteryState::~BatteryState() {
  // @@protoc_insertion_point(destructor:quadruped.BatteryState)
  SharedDtor();
}

void BatteryState::SharedDtor() {
}

void BatteryState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BatteryState::descriptor() {
  ::protobuf_proto_2fstate_5fdatas_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fstate_5fdatas_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatteryState& BatteryState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fstate_5fdatas_2eproto::scc_info_BatteryState.base);
  return *internal_default_instance();
}


void BatteryState::Clear() {
// @@protoc_insertion_point(message_clear_start:quadruped.BatteryState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cycle_) -
        reinterpret_cast<char*>(&status_)) + sizeof(cycle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BatteryState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quadruped.BatteryState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 soc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_soc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 current = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_current();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cycle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_cycle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cycle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quadruped.BatteryState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quadruped.BatteryState)
  return false;
#undef DO_
}

void BatteryState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quadruped.BatteryState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // optional int32 soc = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->soc(), output);
  }

  // optional int32 current = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->current(), output);
  }

  // optional int32 cycle = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cycle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quadruped.BatteryState)
}

::google::protobuf::uint8* BatteryState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quadruped.BatteryState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // optional int32 soc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->soc(), target);
  }

  // optional int32 current = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->current(), target);
  }

  // optional int32 cycle = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cycle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quadruped.BatteryState)
  return target;
}

size_t BatteryState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quadruped.BatteryState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 soc = 2;
    if (has_soc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soc());
    }

    // optional int32 current = 3;
    if (has_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current());
    }

    // optional int32 cycle = 4;
    if (has_cycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cycle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatteryState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quadruped.BatteryState)
  GOOGLE_DCHECK_NE(&from, this);
  const BatteryState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatteryState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quadruped.BatteryState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quadruped.BatteryState)
    MergeFrom(*source);
  }
}

void BatteryState::MergeFrom(const BatteryState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quadruped.BatteryState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000002u) {
      soc_ = from.soc_;
    }
    if (cached_has_bits & 0x00000004u) {
      current_ = from.current_;
    }
    if (cached_has_bits & 0x00000008u) {
      cycle_ = from.cycle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BatteryState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quadruped.BatteryState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatteryState::CopyFrom(const BatteryState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quadruped.BatteryState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatteryState::IsInitialized() const {
  return true;
}

void BatteryState::Swap(BatteryState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatteryState::InternalSwap(BatteryState* other) {
  using std::swap;
  swap(status_, other->status_);
  swap(soc_, other->soc_);
  swap(current_, other->current_);
  swap(cycle_, other->cycle_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BatteryState::GetMetadata() const {
  protobuf_proto_2fstate_5fdatas_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fstate_5fdatas_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMUState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMUState::kQuaternionFieldNumber;
const int IMUState::kGyroscopeFieldNumber;
const int IMUState::kAccelerometerFieldNumber;
const int IMUState::kRpyFieldNumber;
const int IMUState::kTemperatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMUState::IMUState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fstate_5fdatas_2eproto::scc_info_IMUState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quadruped.IMUState)
}
IMUState::IMUState(const IMUState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      quaternion_(from.quaternion_),
      gyroscope_(from.gyroscope_),
      accelerometer_(from.accelerometer_),
      rpy_(from.rpy_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  temperature_ = from.temperature_;
  // @@protoc_insertion_point(copy_constructor:quadruped.IMUState)
}

void IMUState::SharedCtor() {
  temperature_ = 0;
}

IMUState::~IMUState() {
  // @@protoc_insertion_point(destructor:quadruped.IMUState)
  SharedDtor();
}

void IMUState::SharedDtor() {
}

void IMUState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IMUState::descriptor() {
  ::protobuf_proto_2fstate_5fdatas_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fstate_5fdatas_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMUState& IMUState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fstate_5fdatas_2eproto::scc_info_IMUState.base);
  return *internal_default_instance();
}


void IMUState::Clear() {
// @@protoc_insertion_point(message_clear_start:quadruped.IMUState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quaternion_.Clear();
  gyroscope_.Clear();
  accelerometer_.Clear();
  rpy_.Clear();
  temperature_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IMUState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quadruped.IMUState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float quaternion = 1 [packed = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_quaternion())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_quaternion())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float gyroscope = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_gyroscope())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_gyroscope())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float accelerometer = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_accelerometer())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_accelerometer())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float rpy = 4 [packed = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_rpy())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_rpy())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 temperature = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_temperature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quadruped.IMUState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quadruped.IMUState)
  return false;
#undef DO_
}

void IMUState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quadruped.IMUState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float quaternion = 1 [packed = true];
  if (this->quaternion_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _quaternion_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->quaternion().data(), this->quaternion_size(), output);
  }

  // repeated float gyroscope = 2 [packed = true];
  if (this->gyroscope_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _gyroscope_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->gyroscope().data(), this->gyroscope_size(), output);
  }

  // repeated float accelerometer = 3 [packed = true];
  if (this->accelerometer_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _accelerometer_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->accelerometer().data(), this->accelerometer_size(), output);
  }

  // repeated float rpy = 4 [packed = true];
  if (this->rpy_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _rpy_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->rpy().data(), this->rpy_size(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 temperature = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->temperature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quadruped.IMUState)
}

::google::protobuf::uint8* IMUState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quadruped.IMUState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float quaternion = 1 [packed = true];
  if (this->quaternion_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _quaternion_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->quaternion_, target);
  }

  // repeated float gyroscope = 2 [packed = true];
  if (this->gyroscope_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _gyroscope_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->gyroscope_, target);
  }

  // repeated float accelerometer = 3 [packed = true];
  if (this->accelerometer_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _accelerometer_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->accelerometer_, target);
  }

  // repeated float rpy = 4 [packed = true];
  if (this->rpy_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _rpy_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->rpy_, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 temperature = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->temperature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quadruped.IMUState)
  return target;
}

size_t IMUState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quadruped.IMUState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float quaternion = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->quaternion_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _quaternion_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float gyroscope = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->gyroscope_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _gyroscope_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float accelerometer = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->accelerometer_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _accelerometer_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float rpy = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->rpy_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _rpy_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // optional int32 temperature = 5;
  if (has_temperature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->temperature());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMUState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quadruped.IMUState)
  GOOGLE_DCHECK_NE(&from, this);
  const IMUState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMUState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quadruped.IMUState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quadruped.IMUState)
    MergeFrom(*source);
  }
}

void IMUState::MergeFrom(const IMUState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quadruped.IMUState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quaternion_.MergeFrom(from.quaternion_);
  gyroscope_.MergeFrom(from.gyroscope_);
  accelerometer_.MergeFrom(from.accelerometer_);
  rpy_.MergeFrom(from.rpy_);
  if (from.has_temperature()) {
    set_temperature(from.temperature());
  }
}

void IMUState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quadruped.IMUState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMUState::CopyFrom(const IMUState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quadruped.IMUState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUState::IsInitialized() const {
  return true;
}

void IMUState::Swap(IMUState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMUState::InternalSwap(IMUState* other) {
  using std::swap;
  quaternion_.InternalSwap(&other->quaternion_);
  gyroscope_.InternalSwap(&other->gyroscope_);
  accelerometer_.InternalSwap(&other->accelerometer_);
  rpy_.InternalSwap(&other->rpy_);
  swap(temperature_, other->temperature_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IMUState::GetMetadata() const {
  protobuf_proto_2fstate_5fdatas_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fstate_5fdatas_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GlobalLocation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GlobalLocation::kPositionFieldNumber;
const int GlobalLocation::kVelocityFieldNumber;
const int GlobalLocation::kYawSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GlobalLocation::GlobalLocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fstate_5fdatas_2eproto::scc_info_GlobalLocation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quadruped.GlobalLocation)
}
GlobalLocation::GlobalLocation(const GlobalLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      position_(from.position_),
      velocity_(from.velocity_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  yaw_speed_ = from.yaw_speed_;
  // @@protoc_insertion_point(copy_constructor:quadruped.GlobalLocation)
}

void GlobalLocation::SharedCtor() {
  yaw_speed_ = 0;
}

GlobalLocation::~GlobalLocation() {
  // @@protoc_insertion_point(destructor:quadruped.GlobalLocation)
  SharedDtor();
}

void GlobalLocation::SharedDtor() {
}

void GlobalLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GlobalLocation::descriptor() {
  ::protobuf_proto_2fstate_5fdatas_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fstate_5fdatas_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GlobalLocation& GlobalLocation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fstate_5fdatas_2eproto::scc_info_GlobalLocation.base);
  return *internal_default_instance();
}


void GlobalLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:quadruped.GlobalLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  velocity_.Clear();
  yaw_speed_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GlobalLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quadruped.GlobalLocation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float position = 1 [packed = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_position())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_position())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float velocity = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_velocity())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_velocity())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float yaw_speed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_yaw_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quadruped.GlobalLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quadruped.GlobalLocation)
  return false;
#undef DO_
}

void GlobalLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quadruped.GlobalLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float position = 1 [packed = true];
  if (this->position_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _position_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->position().data(), this->position_size(), output);
  }

  // repeated float velocity = 2 [packed = true];
  if (this->velocity_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _velocity_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->velocity().data(), this->velocity_size(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional float yaw_speed = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->yaw_speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quadruped.GlobalLocation)
}

::google::protobuf::uint8* GlobalLocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quadruped.GlobalLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float position = 1 [packed = true];
  if (this->position_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _position_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->position_, target);
  }

  // repeated float velocity = 2 [packed = true];
  if (this->velocity_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _velocity_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->velocity_, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float yaw_speed = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->yaw_speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quadruped.GlobalLocation)
  return target;
}

size_t GlobalLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quadruped.GlobalLocation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float position = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->position_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float velocity = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->velocity_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _velocity_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // optional float yaw_speed = 3;
  if (has_yaw_speed()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quadruped.GlobalLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const GlobalLocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GlobalLocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quadruped.GlobalLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quadruped.GlobalLocation)
    MergeFrom(*source);
  }
}

void GlobalLocation::MergeFrom(const GlobalLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quadruped.GlobalLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
  velocity_.MergeFrom(from.velocity_);
  if (from.has_yaw_speed()) {
    set_yaw_speed(from.yaw_speed());
  }
}

void GlobalLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quadruped.GlobalLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalLocation::CopyFrom(const GlobalLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quadruped.GlobalLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalLocation::IsInitialized() const {
  return true;
}

void GlobalLocation::Swap(GlobalLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GlobalLocation::InternalSwap(GlobalLocation* other) {
  using std::swap;
  position_.InternalSwap(&other->position_);
  velocity_.InternalSwap(&other->velocity_);
  swap(yaw_speed_, other->yaw_speed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GlobalLocation::GetMetadata() const {
  protobuf_proto_2fstate_5fdatas_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fstate_5fdatas_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BodyLocation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BodyLocation::kFootForceFieldNumber;
const int BodyLocation::kBodyHeightFieldNumber;
const int BodyLocation::kFootPositionBodyFieldNumber;
const int BodyLocation::kFootSpeedBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BodyLocation::BodyLocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fstate_5fdatas_2eproto::scc_info_BodyLocation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quadruped.BodyLocation)
}
BodyLocation::BodyLocation(const BodyLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      foot_force_(from.foot_force_),
      foot_position_body_(from.foot_position_body_),
      foot_speed_body_(from.foot_speed_body_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  body_height_ = from.body_height_;
  // @@protoc_insertion_point(copy_constructor:quadruped.BodyLocation)
}

void BodyLocation::SharedCtor() {
  body_height_ = 0;
}

BodyLocation::~BodyLocation() {
  // @@protoc_insertion_point(destructor:quadruped.BodyLocation)
  SharedDtor();
}

void BodyLocation::SharedDtor() {
}

void BodyLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BodyLocation::descriptor() {
  ::protobuf_proto_2fstate_5fdatas_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fstate_5fdatas_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BodyLocation& BodyLocation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fstate_5fdatas_2eproto::scc_info_BodyLocation.base);
  return *internal_default_instance();
}


void BodyLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:quadruped.BodyLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  foot_force_.Clear();
  foot_position_body_.Clear();
  foot_speed_body_.Clear();
  body_height_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BodyLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quadruped.BodyLocation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 foot_force = 1 [packed = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_foot_force())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_foot_force())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float body_height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_body_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &body_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float foot_position_body = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_foot_position_body())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_foot_position_body())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float foot_speed_body = 4 [packed = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_foot_speed_body())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_foot_speed_body())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quadruped.BodyLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quadruped.BodyLocation)
  return false;
#undef DO_
}

void BodyLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quadruped.BodyLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 foot_force = 1 [packed = true];
  if (this->foot_force_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _foot_force_cached_byte_size_));
  }
  for (int i = 0, n = this->foot_force_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->foot_force(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional float body_height = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->body_height(), output);
  }

  // repeated float foot_position_body = 3 [packed = true];
  if (this->foot_position_body_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _foot_position_body_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->foot_position_body().data(), this->foot_position_body_size(), output);
  }

  // repeated float foot_speed_body = 4 [packed = true];
  if (this->foot_speed_body_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _foot_speed_body_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->foot_speed_body().data(), this->foot_speed_body_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quadruped.BodyLocation)
}

::google::protobuf::uint8* BodyLocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quadruped.BodyLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 foot_force = 1 [packed = true];
  if (this->foot_force_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _foot_force_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->foot_force_, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float body_height = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->body_height(), target);
  }

  // repeated float foot_position_body = 3 [packed = true];
  if (this->foot_position_body_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _foot_position_body_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->foot_position_body_, target);
  }

  // repeated float foot_speed_body = 4 [packed = true];
  if (this->foot_speed_body_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _foot_speed_body_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->foot_speed_body_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quadruped.BodyLocation)
  return target;
}

size_t BodyLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quadruped.BodyLocation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 foot_force = 1 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->foot_force_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _foot_force_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float foot_position_body = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->foot_position_body_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _foot_position_body_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float foot_speed_body = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->foot_speed_body_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _foot_speed_body_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // optional float body_height = 2;
  if (has_body_height()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BodyLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quadruped.BodyLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const BodyLocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BodyLocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quadruped.BodyLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quadruped.BodyLocation)
    MergeFrom(*source);
  }
}

void BodyLocation::MergeFrom(const BodyLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quadruped.BodyLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  foot_force_.MergeFrom(from.foot_force_);
  foot_position_body_.MergeFrom(from.foot_position_body_);
  foot_speed_body_.MergeFrom(from.foot_speed_body_);
  if (from.has_body_height()) {
    set_body_height(from.body_height());
  }
}

void BodyLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quadruped.BodyLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BodyLocation::CopyFrom(const BodyLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quadruped.BodyLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BodyLocation::IsInitialized() const {
  return true;
}

void BodyLocation::Swap(BodyLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BodyLocation::InternalSwap(BodyLocation* other) {
  using std::swap;
  foot_force_.InternalSwap(&other->foot_force_);
  foot_position_body_.InternalSwap(&other->foot_position_body_);
  foot_speed_body_.InternalSwap(&other->foot_speed_body_);
  swap(body_height_, other->body_height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BodyLocation::GetMetadata() const {
  protobuf_proto_2fstate_5fdatas_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fstate_5fdatas_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StateDatas::InitAsDefaultInstance() {
  ::quadruped::_StateDatas_default_instance_._instance.get_mutable()->battery_state_ = const_cast< ::quadruped::BatteryState*>(
      ::quadruped::BatteryState::internal_default_instance());
  ::quadruped::_StateDatas_default_instance_._instance.get_mutable()->imu_state_ = const_cast< ::quadruped::IMUState*>(
      ::quadruped::IMUState::internal_default_instance());
  ::quadruped::_StateDatas_default_instance_._instance.get_mutable()->global_location_ = const_cast< ::quadruped::GlobalLocation*>(
      ::quadruped::GlobalLocation::internal_default_instance());
  ::quadruped::_StateDatas_default_instance_._instance.get_mutable()->body_location_ = const_cast< ::quadruped::BodyLocation*>(
      ::quadruped::BodyLocation::internal_default_instance());
}
::google::protobuf::internal::ExplicitlyConstructed<::std::string> StateDatas::_i_give_permission_to_break_this_code_default_sport_mode_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StateDatas::kObstacleAvoidModeFieldNumber;
const int StateDatas::kSportModeFieldNumber;
const int StateDatas::kHighLevelModeFieldNumber;
const int StateDatas::kFootRaiseHeightFieldNumber;
const int StateDatas::kGaitTypeFieldNumber;
const int StateDatas::kBatteryStateFieldNumber;
const int StateDatas::kImuStateFieldNumber;
const int StateDatas::kGlobalLocationFieldNumber;
const int StateDatas::kBodyLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StateDatas::StateDatas()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fstate_5fdatas_2eproto::scc_info_StateDatas.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quadruped.StateDatas)
}
StateDatas::StateDatas(const StateDatas& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sport_mode_.UnsafeSetDefault(&::quadruped::StateDatas::_i_give_permission_to_break_this_code_default_sport_mode_.get());
  if (from.has_sport_mode()) {
    sport_mode_.AssignWithDefault(&::quadruped::StateDatas::_i_give_permission_to_break_this_code_default_sport_mode_.get(), from.sport_mode_);
  }
  if (from.has_battery_state()) {
    battery_state_ = new ::quadruped::BatteryState(*from.battery_state_);
  } else {
    battery_state_ = NULL;
  }
  if (from.has_imu_state()) {
    imu_state_ = new ::quadruped::IMUState(*from.imu_state_);
  } else {
    imu_state_ = NULL;
  }
  if (from.has_global_location()) {
    global_location_ = new ::quadruped::GlobalLocation(*from.global_location_);
  } else {
    global_location_ = NULL;
  }
  if (from.has_body_location()) {
    body_location_ = new ::quadruped::BodyLocation(*from.body_location_);
  } else {
    body_location_ = NULL;
  }
  ::memcpy(&obstacle_avoid_mode_, &from.obstacle_avoid_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&gait_type_) -
    reinterpret_cast<char*>(&obstacle_avoid_mode_)) + sizeof(gait_type_));
  // @@protoc_insertion_point(copy_constructor:quadruped.StateDatas)
}

void StateDatas::SharedCtor() {
  sport_mode_.UnsafeSetDefault(&::quadruped::StateDatas::_i_give_permission_to_break_this_code_default_sport_mode_.get());
  ::memset(&battery_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gait_type_) -
      reinterpret_cast<char*>(&battery_state_)) + sizeof(gait_type_));
}

StateDatas::~StateDatas() {
  // @@protoc_insertion_point(destructor:quadruped.StateDatas)
  SharedDtor();
}

void StateDatas::SharedDtor() {
  sport_mode_.DestroyNoArena(&::quadruped::StateDatas::_i_give_permission_to_break_this_code_default_sport_mode_.get());
  if (this != internal_default_instance()) delete battery_state_;
  if (this != internal_default_instance()) delete imu_state_;
  if (this != internal_default_instance()) delete global_location_;
  if (this != internal_default_instance()) delete body_location_;
}

void StateDatas::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StateDatas::descriptor() {
  ::protobuf_proto_2fstate_5fdatas_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fstate_5fdatas_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StateDatas& StateDatas::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fstate_5fdatas_2eproto::scc_info_StateDatas.base);
  return *internal_default_instance();
}


void StateDatas::Clear() {
// @@protoc_insertion_point(message_clear_start:quadruped.StateDatas)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      sport_mode_.UnsafeMutablePointer()->assign(*&::quadruped::StateDatas::_i_give_permission_to_break_this_code_default_sport_mode_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(battery_state_ != NULL);
      battery_state_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(imu_state_ != NULL);
      imu_state_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(global_location_ != NULL);
      global_location_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(body_location_ != NULL);
      body_location_->Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&obstacle_avoid_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&foot_raise_height_) -
        reinterpret_cast<char*>(&obstacle_avoid_mode_)) + sizeof(foot_raise_height_));
  }
  gait_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StateDatas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quadruped.StateDatas)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool obstacle_avoid_mode = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_obstacle_avoid_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obstacle_avoid_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sport_mode = 2 [default = "normal"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sport_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sport_mode().data(), static_cast<int>(this->sport_mode().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quadruped.StateDatas.sport_mode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 high_level_mode = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_high_level_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &high_level_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float foot_raise_height = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_foot_raise_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &foot_raise_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gait_type = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_gait_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gait_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .quadruped.BatteryState battery_state = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_battery_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .quadruped.IMUState imu_state = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_imu_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .quadruped.GlobalLocation global_location = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_global_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .quadruped.BodyLocation body_location = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_body_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quadruped.StateDatas)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quadruped.StateDatas)
  return false;
#undef DO_
}

void StateDatas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quadruped.StateDatas)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool obstacle_avoid_mode = 1 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->obstacle_avoid_mode(), output);
  }

  // optional string sport_mode = 2 [default = "normal"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sport_mode().data(), static_cast<int>(this->sport_mode().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quadruped.StateDatas.sport_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sport_mode(), output);
  }

  // optional int32 high_level_mode = 3 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->high_level_mode(), output);
  }

  // optional float foot_raise_height = 5 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->foot_raise_height(), output);
  }

  // optional int32 gait_type = 6 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gait_type(), output);
  }

  // optional .quadruped.BatteryState battery_state = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_battery_state(), output);
  }

  // optional .quadruped.IMUState imu_state = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_imu_state(), output);
  }

  // optional .quadruped.GlobalLocation global_location = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_global_location(), output);
  }

  // optional .quadruped.BodyLocation body_location = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_body_location(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:quadruped.StateDatas)
}

::google::protobuf::uint8* StateDatas::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quadruped.StateDatas)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool obstacle_avoid_mode = 1 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->obstacle_avoid_mode(), target);
  }

  // optional string sport_mode = 2 [default = "normal"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sport_mode().data(), static_cast<int>(this->sport_mode().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quadruped.StateDatas.sport_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sport_mode(), target);
  }

  // optional int32 high_level_mode = 3 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->high_level_mode(), target);
  }

  // optional float foot_raise_height = 5 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->foot_raise_height(), target);
  }

  // optional int32 gait_type = 6 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gait_type(), target);
  }

  // optional .quadruped.BatteryState battery_state = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_battery_state(), deterministic, target);
  }

  // optional .quadruped.IMUState imu_state = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_imu_state(), deterministic, target);
  }

  // optional .quadruped.GlobalLocation global_location = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_global_location(), deterministic, target);
  }

  // optional .quadruped.BodyLocation body_location = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_body_location(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quadruped.StateDatas)
  return target;
}

size_t StateDatas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quadruped.StateDatas)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string sport_mode = 2 [default = "normal"];
    if (has_sport_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sport_mode());
    }

    // optional .quadruped.BatteryState battery_state = 7;
    if (has_battery_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *battery_state_);
    }

    // optional .quadruped.IMUState imu_state = 8;
    if (has_imu_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *imu_state_);
    }

    // optional .quadruped.GlobalLocation global_location = 9;
    if (has_global_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *global_location_);
    }

    // optional .quadruped.BodyLocation body_location = 10;
    if (has_body_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *body_location_);
    }

    // optional bool obstacle_avoid_mode = 1 [default = false];
    if (has_obstacle_avoid_mode()) {
      total_size += 1 + 1;
    }

    // optional int32 high_level_mode = 3 [default = 0];
    if (has_high_level_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->high_level_mode());
    }

    // optional float foot_raise_height = 5 [default = 0];
    if (has_foot_raise_height()) {
      total_size += 1 + 4;
    }

  }
  // optional int32 gait_type = 6 [default = 0];
  if (has_gait_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->gait_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateDatas::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quadruped.StateDatas)
  GOOGLE_DCHECK_NE(&from, this);
  const StateDatas* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StateDatas>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quadruped.StateDatas)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quadruped.StateDatas)
    MergeFrom(*source);
  }
}

void StateDatas::MergeFrom(const StateDatas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quadruped.StateDatas)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sport_mode();
      sport_mode_.AssignWithDefault(&::quadruped::StateDatas::_i_give_permission_to_break_this_code_default_sport_mode_.get(), from.sport_mode_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_battery_state()->::quadruped::BatteryState::MergeFrom(from.battery_state());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_imu_state()->::quadruped::IMUState::MergeFrom(from.imu_state());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_global_location()->::quadruped::GlobalLocation::MergeFrom(from.global_location());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_body_location()->::quadruped::BodyLocation::MergeFrom(from.body_location());
    }
    if (cached_has_bits & 0x00000020u) {
      obstacle_avoid_mode_ = from.obstacle_avoid_mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      high_level_mode_ = from.high_level_mode_;
    }
    if (cached_has_bits & 0x00000080u) {
      foot_raise_height_ = from.foot_raise_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_gait_type(from.gait_type());
  }
}

void StateDatas::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quadruped.StateDatas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateDatas::CopyFrom(const StateDatas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quadruped.StateDatas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateDatas::IsInitialized() const {
  return true;
}

void StateDatas::Swap(StateDatas* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StateDatas::InternalSwap(StateDatas* other) {
  using std::swap;
  sport_mode_.Swap(&other->sport_mode_, &::quadruped::StateDatas::_i_give_permission_to_break_this_code_default_sport_mode_.get(),
    GetArenaNoVirtual());
  swap(battery_state_, other->battery_state_);
  swap(imu_state_, other->imu_state_);
  swap(global_location_, other->global_location_);
  swap(body_location_, other->body_location_);
  swap(obstacle_avoid_mode_, other->obstacle_avoid_mode_);
  swap(high_level_mode_, other->high_level_mode_);
  swap(foot_raise_height_, other->foot_raise_height_);
  swap(gait_type_, other->gait_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StateDatas::GetMetadata() const {
  protobuf_proto_2fstate_5fdatas_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fstate_5fdatas_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace quadruped
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quadruped::BatteryState* Arena::CreateMaybeMessage< ::quadruped::BatteryState >(Arena* arena) {
  return Arena::CreateInternal< ::quadruped::BatteryState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quadruped::IMUState* Arena::CreateMaybeMessage< ::quadruped::IMUState >(Arena* arena) {
  return Arena::CreateInternal< ::quadruped::IMUState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quadruped::GlobalLocation* Arena::CreateMaybeMessage< ::quadruped::GlobalLocation >(Arena* arena) {
  return Arena::CreateInternal< ::quadruped::GlobalLocation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quadruped::BodyLocation* Arena::CreateMaybeMessage< ::quadruped::BodyLocation >(Arena* arena) {
  return Arena::CreateInternal< ::quadruped::BodyLocation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quadruped::StateDatas* Arena::CreateMaybeMessage< ::quadruped::StateDatas >(Arena* arena) {
  return Arena::CreateInternal< ::quadruped::StateDatas >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
