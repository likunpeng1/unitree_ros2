// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/state_datas.proto

#ifndef PROTOBUF_INCLUDED_proto_2fstate_5fdatas_2eproto
#define PROTOBUF_INCLUDED_proto_2fstate_5fdatas_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fstate_5fdatas_2eproto 

namespace protobuf_proto_2fstate_5fdatas_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_proto_2fstate_5fdatas_2eproto
namespace quadruped {
class BatteryState;
class BatteryStateDefaultTypeInternal;
extern BatteryStateDefaultTypeInternal _BatteryState_default_instance_;
class BodyLocation;
class BodyLocationDefaultTypeInternal;
extern BodyLocationDefaultTypeInternal _BodyLocation_default_instance_;
class GlobalLocation;
class GlobalLocationDefaultTypeInternal;
extern GlobalLocationDefaultTypeInternal _GlobalLocation_default_instance_;
class IMUState;
class IMUStateDefaultTypeInternal;
extern IMUStateDefaultTypeInternal _IMUState_default_instance_;
class StateDatas;
class StateDatasDefaultTypeInternal;
extern StateDatasDefaultTypeInternal _StateDatas_default_instance_;
}  // namespace quadruped
namespace google {
namespace protobuf {
template<> ::quadruped::BatteryState* Arena::CreateMaybeMessage<::quadruped::BatteryState>(Arena*);
template<> ::quadruped::BodyLocation* Arena::CreateMaybeMessage<::quadruped::BodyLocation>(Arena*);
template<> ::quadruped::GlobalLocation* Arena::CreateMaybeMessage<::quadruped::GlobalLocation>(Arena*);
template<> ::quadruped::IMUState* Arena::CreateMaybeMessage<::quadruped::IMUState>(Arena*);
template<> ::quadruped::StateDatas* Arena::CreateMaybeMessage<::quadruped::StateDatas>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace quadruped {

// ===================================================================

class BatteryState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quadruped.BatteryState) */ {
 public:
  BatteryState();
  virtual ~BatteryState();

  BatteryState(const BatteryState& from);

  inline BatteryState& operator=(const BatteryState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatteryState(BatteryState&& from) noexcept
    : BatteryState() {
    *this = ::std::move(from);
  }

  inline BatteryState& operator=(BatteryState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatteryState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatteryState* internal_default_instance() {
    return reinterpret_cast<const BatteryState*>(
               &_BatteryState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BatteryState* other);
  friend void swap(BatteryState& a, BatteryState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatteryState* New() const final {
    return CreateMaybeMessage<BatteryState>(NULL);
  }

  BatteryState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BatteryState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BatteryState& from);
  void MergeFrom(const BatteryState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatteryState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // optional int32 soc = 2;
  bool has_soc() const;
  void clear_soc();
  static const int kSocFieldNumber = 2;
  ::google::protobuf::int32 soc() const;
  void set_soc(::google::protobuf::int32 value);

  // optional int32 current = 3;
  bool has_current() const;
  void clear_current();
  static const int kCurrentFieldNumber = 3;
  ::google::protobuf::int32 current() const;
  void set_current(::google::protobuf::int32 value);

  // optional int32 cycle = 4;
  bool has_cycle() const;
  void clear_cycle();
  static const int kCycleFieldNumber = 4;
  ::google::protobuf::int32 cycle() const;
  void set_cycle(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:quadruped.BatteryState)
 private:
  void set_has_status();
  void clear_has_status();
  void set_has_soc();
  void clear_has_soc();
  void set_has_current();
  void clear_has_current();
  void set_has_cycle();
  void clear_has_cycle();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 soc_;
  ::google::protobuf::int32 current_;
  ::google::protobuf::int32 cycle_;
  friend struct ::protobuf_proto_2fstate_5fdatas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IMUState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quadruped.IMUState) */ {
 public:
  IMUState();
  virtual ~IMUState();

  IMUState(const IMUState& from);

  inline IMUState& operator=(const IMUState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMUState(IMUState&& from) noexcept
    : IMUState() {
    *this = ::std::move(from);
  }

  inline IMUState& operator=(IMUState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IMUState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMUState* internal_default_instance() {
    return reinterpret_cast<const IMUState*>(
               &_IMUState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(IMUState* other);
  friend void swap(IMUState& a, IMUState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMUState* New() const final {
    return CreateMaybeMessage<IMUState>(NULL);
  }

  IMUState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IMUState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IMUState& from);
  void MergeFrom(const IMUState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMUState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float quaternion = 1 [packed = true];
  int quaternion_size() const;
  void clear_quaternion();
  static const int kQuaternionFieldNumber = 1;
  float quaternion(int index) const;
  void set_quaternion(int index, float value);
  void add_quaternion(float value);
  const ::google::protobuf::RepeatedField< float >&
      quaternion() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_quaternion();

  // repeated float gyroscope = 2 [packed = true];
  int gyroscope_size() const;
  void clear_gyroscope();
  static const int kGyroscopeFieldNumber = 2;
  float gyroscope(int index) const;
  void set_gyroscope(int index, float value);
  void add_gyroscope(float value);
  const ::google::protobuf::RepeatedField< float >&
      gyroscope() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_gyroscope();

  // repeated float accelerometer = 3 [packed = true];
  int accelerometer_size() const;
  void clear_accelerometer();
  static const int kAccelerometerFieldNumber = 3;
  float accelerometer(int index) const;
  void set_accelerometer(int index, float value);
  void add_accelerometer(float value);
  const ::google::protobuf::RepeatedField< float >&
      accelerometer() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_accelerometer();

  // repeated float rpy = 4 [packed = true];
  int rpy_size() const;
  void clear_rpy();
  static const int kRpyFieldNumber = 4;
  float rpy(int index) const;
  void set_rpy(int index, float value);
  void add_rpy(float value);
  const ::google::protobuf::RepeatedField< float >&
      rpy() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_rpy();

  // optional int32 temperature = 5;
  bool has_temperature() const;
  void clear_temperature();
  static const int kTemperatureFieldNumber = 5;
  ::google::protobuf::int32 temperature() const;
  void set_temperature(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:quadruped.IMUState)
 private:
  void set_has_temperature();
  void clear_has_temperature();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< float > quaternion_;
  mutable int _quaternion_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > gyroscope_;
  mutable int _gyroscope_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > accelerometer_;
  mutable int _accelerometer_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > rpy_;
  mutable int _rpy_cached_byte_size_;
  ::google::protobuf::int32 temperature_;
  friend struct ::protobuf_proto_2fstate_5fdatas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GlobalLocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quadruped.GlobalLocation) */ {
 public:
  GlobalLocation();
  virtual ~GlobalLocation();

  GlobalLocation(const GlobalLocation& from);

  inline GlobalLocation& operator=(const GlobalLocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GlobalLocation(GlobalLocation&& from) noexcept
    : GlobalLocation() {
    *this = ::std::move(from);
  }

  inline GlobalLocation& operator=(GlobalLocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalLocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlobalLocation* internal_default_instance() {
    return reinterpret_cast<const GlobalLocation*>(
               &_GlobalLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GlobalLocation* other);
  friend void swap(GlobalLocation& a, GlobalLocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GlobalLocation* New() const final {
    return CreateMaybeMessage<GlobalLocation>(NULL);
  }

  GlobalLocation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GlobalLocation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GlobalLocation& from);
  void MergeFrom(const GlobalLocation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalLocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float position = 1 [packed = true];
  int position_size() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  float position(int index) const;
  void set_position(int index, float value);
  void add_position(float value);
  const ::google::protobuf::RepeatedField< float >&
      position() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_position();

  // repeated float velocity = 2 [packed = true];
  int velocity_size() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 2;
  float velocity(int index) const;
  void set_velocity(int index, float value);
  void add_velocity(float value);
  const ::google::protobuf::RepeatedField< float >&
      velocity() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_velocity();

  // optional float yaw_speed = 3;
  bool has_yaw_speed() const;
  void clear_yaw_speed();
  static const int kYawSpeedFieldNumber = 3;
  float yaw_speed() const;
  void set_yaw_speed(float value);

  // @@protoc_insertion_point(class_scope:quadruped.GlobalLocation)
 private:
  void set_has_yaw_speed();
  void clear_has_yaw_speed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< float > position_;
  mutable int _position_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > velocity_;
  mutable int _velocity_cached_byte_size_;
  float yaw_speed_;
  friend struct ::protobuf_proto_2fstate_5fdatas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BodyLocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quadruped.BodyLocation) */ {
 public:
  BodyLocation();
  virtual ~BodyLocation();

  BodyLocation(const BodyLocation& from);

  inline BodyLocation& operator=(const BodyLocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BodyLocation(BodyLocation&& from) noexcept
    : BodyLocation() {
    *this = ::std::move(from);
  }

  inline BodyLocation& operator=(BodyLocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BodyLocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BodyLocation* internal_default_instance() {
    return reinterpret_cast<const BodyLocation*>(
               &_BodyLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(BodyLocation* other);
  friend void swap(BodyLocation& a, BodyLocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BodyLocation* New() const final {
    return CreateMaybeMessage<BodyLocation>(NULL);
  }

  BodyLocation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BodyLocation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BodyLocation& from);
  void MergeFrom(const BodyLocation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BodyLocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 foot_force = 1 [packed = true];
  int foot_force_size() const;
  void clear_foot_force();
  static const int kFootForceFieldNumber = 1;
  ::google::protobuf::int32 foot_force(int index) const;
  void set_foot_force(int index, ::google::protobuf::int32 value);
  void add_foot_force(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      foot_force() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_foot_force();

  // repeated float foot_position_body = 3 [packed = true];
  int foot_position_body_size() const;
  void clear_foot_position_body();
  static const int kFootPositionBodyFieldNumber = 3;
  float foot_position_body(int index) const;
  void set_foot_position_body(int index, float value);
  void add_foot_position_body(float value);
  const ::google::protobuf::RepeatedField< float >&
      foot_position_body() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_foot_position_body();

  // repeated float foot_speed_body = 4 [packed = true];
  int foot_speed_body_size() const;
  void clear_foot_speed_body();
  static const int kFootSpeedBodyFieldNumber = 4;
  float foot_speed_body(int index) const;
  void set_foot_speed_body(int index, float value);
  void add_foot_speed_body(float value);
  const ::google::protobuf::RepeatedField< float >&
      foot_speed_body() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_foot_speed_body();

  // optional float body_height = 2;
  bool has_body_height() const;
  void clear_body_height();
  static const int kBodyHeightFieldNumber = 2;
  float body_height() const;
  void set_body_height(float value);

  // @@protoc_insertion_point(class_scope:quadruped.BodyLocation)
 private:
  void set_has_body_height();
  void clear_has_body_height();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > foot_force_;
  mutable int _foot_force_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > foot_position_body_;
  mutable int _foot_position_body_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > foot_speed_body_;
  mutable int _foot_speed_body_cached_byte_size_;
  float body_height_;
  friend struct ::protobuf_proto_2fstate_5fdatas_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StateDatas : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quadruped.StateDatas) */ {
 public:
  StateDatas();
  virtual ~StateDatas();

  StateDatas(const StateDatas& from);

  inline StateDatas& operator=(const StateDatas& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StateDatas(StateDatas&& from) noexcept
    : StateDatas() {
    *this = ::std::move(from);
  }

  inline StateDatas& operator=(StateDatas&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StateDatas& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateDatas* internal_default_instance() {
    return reinterpret_cast<const StateDatas*>(
               &_StateDatas_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(StateDatas* other);
  friend void swap(StateDatas& a, StateDatas& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StateDatas* New() const final {
    return CreateMaybeMessage<StateDatas>(NULL);
  }

  StateDatas* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StateDatas>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StateDatas& from);
  void MergeFrom(const StateDatas& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StateDatas* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sport_mode = 2 [default = "normal"];
  bool has_sport_mode() const;
  void clear_sport_mode();
  static const int kSportModeFieldNumber = 2;
  const ::std::string& sport_mode() const;
  void set_sport_mode(const ::std::string& value);
  #if LANG_CXX11
  void set_sport_mode(::std::string&& value);
  #endif
  void set_sport_mode(const char* value);
  void set_sport_mode(const char* value, size_t size);
  ::std::string* mutable_sport_mode();
  ::std::string* release_sport_mode();
  void set_allocated_sport_mode(::std::string* sport_mode);

  // optional .quadruped.BatteryState battery_state = 7;
  bool has_battery_state() const;
  void clear_battery_state();
  static const int kBatteryStateFieldNumber = 7;
  private:
  const ::quadruped::BatteryState& _internal_battery_state() const;
  public:
  const ::quadruped::BatteryState& battery_state() const;
  ::quadruped::BatteryState* release_battery_state();
  ::quadruped::BatteryState* mutable_battery_state();
  void set_allocated_battery_state(::quadruped::BatteryState* battery_state);

  // optional .quadruped.IMUState imu_state = 8;
  bool has_imu_state() const;
  void clear_imu_state();
  static const int kImuStateFieldNumber = 8;
  private:
  const ::quadruped::IMUState& _internal_imu_state() const;
  public:
  const ::quadruped::IMUState& imu_state() const;
  ::quadruped::IMUState* release_imu_state();
  ::quadruped::IMUState* mutable_imu_state();
  void set_allocated_imu_state(::quadruped::IMUState* imu_state);

  // optional .quadruped.GlobalLocation global_location = 9;
  bool has_global_location() const;
  void clear_global_location();
  static const int kGlobalLocationFieldNumber = 9;
  private:
  const ::quadruped::GlobalLocation& _internal_global_location() const;
  public:
  const ::quadruped::GlobalLocation& global_location() const;
  ::quadruped::GlobalLocation* release_global_location();
  ::quadruped::GlobalLocation* mutable_global_location();
  void set_allocated_global_location(::quadruped::GlobalLocation* global_location);

  // optional .quadruped.BodyLocation body_location = 10;
  bool has_body_location() const;
  void clear_body_location();
  static const int kBodyLocationFieldNumber = 10;
  private:
  const ::quadruped::BodyLocation& _internal_body_location() const;
  public:
  const ::quadruped::BodyLocation& body_location() const;
  ::quadruped::BodyLocation* release_body_location();
  ::quadruped::BodyLocation* mutable_body_location();
  void set_allocated_body_location(::quadruped::BodyLocation* body_location);

  // optional bool obstacle_avoid_mode = 1 [default = false];
  bool has_obstacle_avoid_mode() const;
  void clear_obstacle_avoid_mode();
  static const int kObstacleAvoidModeFieldNumber = 1;
  bool obstacle_avoid_mode() const;
  void set_obstacle_avoid_mode(bool value);

  // optional int32 high_level_mode = 3 [default = 0];
  bool has_high_level_mode() const;
  void clear_high_level_mode();
  static const int kHighLevelModeFieldNumber = 3;
  ::google::protobuf::int32 high_level_mode() const;
  void set_high_level_mode(::google::protobuf::int32 value);

  // optional float foot_raise_height = 5 [default = 0];
  bool has_foot_raise_height() const;
  void clear_foot_raise_height();
  static const int kFootRaiseHeightFieldNumber = 5;
  float foot_raise_height() const;
  void set_foot_raise_height(float value);

  // optional int32 gait_type = 6 [default = 0];
  bool has_gait_type() const;
  void clear_gait_type();
  static const int kGaitTypeFieldNumber = 6;
  ::google::protobuf::int32 gait_type() const;
  void set_gait_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:quadruped.StateDatas)
 private:
  void set_has_obstacle_avoid_mode();
  void clear_has_obstacle_avoid_mode();
  void set_has_sport_mode();
  void clear_has_sport_mode();
  void set_has_high_level_mode();
  void clear_has_high_level_mode();
  void set_has_foot_raise_height();
  void clear_has_foot_raise_height();
  void set_has_gait_type();
  void clear_has_gait_type();
  void set_has_battery_state();
  void clear_has_battery_state();
  void set_has_imu_state();
  void clear_has_imu_state();
  void set_has_global_location();
  void clear_has_global_location();
  void set_has_body_location();
  void clear_has_body_location();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_sport_mode_;
  private:
  ::google::protobuf::internal::ArenaStringPtr sport_mode_;
  ::quadruped::BatteryState* battery_state_;
  ::quadruped::IMUState* imu_state_;
  ::quadruped::GlobalLocation* global_location_;
  ::quadruped::BodyLocation* body_location_;
  bool obstacle_avoid_mode_;
  ::google::protobuf::int32 high_level_mode_;
  float foot_raise_height_;
  ::google::protobuf::int32 gait_type_;
  friend struct ::protobuf_proto_2fstate_5fdatas_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BatteryState

// optional int32 status = 1;
inline bool BatteryState::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatteryState::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BatteryState::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BatteryState::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 BatteryState::status() const {
  // @@protoc_insertion_point(field_get:quadruped.BatteryState.status)
  return status_;
}
inline void BatteryState::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:quadruped.BatteryState.status)
}

// optional int32 soc = 2;
inline bool BatteryState::has_soc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatteryState::set_has_soc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BatteryState::clear_has_soc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BatteryState::clear_soc() {
  soc_ = 0;
  clear_has_soc();
}
inline ::google::protobuf::int32 BatteryState::soc() const {
  // @@protoc_insertion_point(field_get:quadruped.BatteryState.soc)
  return soc_;
}
inline void BatteryState::set_soc(::google::protobuf::int32 value) {
  set_has_soc();
  soc_ = value;
  // @@protoc_insertion_point(field_set:quadruped.BatteryState.soc)
}

// optional int32 current = 3;
inline bool BatteryState::has_current() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BatteryState::set_has_current() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BatteryState::clear_has_current() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BatteryState::clear_current() {
  current_ = 0;
  clear_has_current();
}
inline ::google::protobuf::int32 BatteryState::current() const {
  // @@protoc_insertion_point(field_get:quadruped.BatteryState.current)
  return current_;
}
inline void BatteryState::set_current(::google::protobuf::int32 value) {
  set_has_current();
  current_ = value;
  // @@protoc_insertion_point(field_set:quadruped.BatteryState.current)
}

// optional int32 cycle = 4;
inline bool BatteryState::has_cycle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BatteryState::set_has_cycle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BatteryState::clear_has_cycle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BatteryState::clear_cycle() {
  cycle_ = 0;
  clear_has_cycle();
}
inline ::google::protobuf::int32 BatteryState::cycle() const {
  // @@protoc_insertion_point(field_get:quadruped.BatteryState.cycle)
  return cycle_;
}
inline void BatteryState::set_cycle(::google::protobuf::int32 value) {
  set_has_cycle();
  cycle_ = value;
  // @@protoc_insertion_point(field_set:quadruped.BatteryState.cycle)
}

// -------------------------------------------------------------------

// IMUState

// repeated float quaternion = 1 [packed = true];
inline int IMUState::quaternion_size() const {
  return quaternion_.size();
}
inline void IMUState::clear_quaternion() {
  quaternion_.Clear();
}
inline float IMUState::quaternion(int index) const {
  // @@protoc_insertion_point(field_get:quadruped.IMUState.quaternion)
  return quaternion_.Get(index);
}
inline void IMUState::set_quaternion(int index, float value) {
  quaternion_.Set(index, value);
  // @@protoc_insertion_point(field_set:quadruped.IMUState.quaternion)
}
inline void IMUState::add_quaternion(float value) {
  quaternion_.Add(value);
  // @@protoc_insertion_point(field_add:quadruped.IMUState.quaternion)
}
inline const ::google::protobuf::RepeatedField< float >&
IMUState::quaternion() const {
  // @@protoc_insertion_point(field_list:quadruped.IMUState.quaternion)
  return quaternion_;
}
inline ::google::protobuf::RepeatedField< float >*
IMUState::mutable_quaternion() {
  // @@protoc_insertion_point(field_mutable_list:quadruped.IMUState.quaternion)
  return &quaternion_;
}

// repeated float gyroscope = 2 [packed = true];
inline int IMUState::gyroscope_size() const {
  return gyroscope_.size();
}
inline void IMUState::clear_gyroscope() {
  gyroscope_.Clear();
}
inline float IMUState::gyroscope(int index) const {
  // @@protoc_insertion_point(field_get:quadruped.IMUState.gyroscope)
  return gyroscope_.Get(index);
}
inline void IMUState::set_gyroscope(int index, float value) {
  gyroscope_.Set(index, value);
  // @@protoc_insertion_point(field_set:quadruped.IMUState.gyroscope)
}
inline void IMUState::add_gyroscope(float value) {
  gyroscope_.Add(value);
  // @@protoc_insertion_point(field_add:quadruped.IMUState.gyroscope)
}
inline const ::google::protobuf::RepeatedField< float >&
IMUState::gyroscope() const {
  // @@protoc_insertion_point(field_list:quadruped.IMUState.gyroscope)
  return gyroscope_;
}
inline ::google::protobuf::RepeatedField< float >*
IMUState::mutable_gyroscope() {
  // @@protoc_insertion_point(field_mutable_list:quadruped.IMUState.gyroscope)
  return &gyroscope_;
}

// repeated float accelerometer = 3 [packed = true];
inline int IMUState::accelerometer_size() const {
  return accelerometer_.size();
}
inline void IMUState::clear_accelerometer() {
  accelerometer_.Clear();
}
inline float IMUState::accelerometer(int index) const {
  // @@protoc_insertion_point(field_get:quadruped.IMUState.accelerometer)
  return accelerometer_.Get(index);
}
inline void IMUState::set_accelerometer(int index, float value) {
  accelerometer_.Set(index, value);
  // @@protoc_insertion_point(field_set:quadruped.IMUState.accelerometer)
}
inline void IMUState::add_accelerometer(float value) {
  accelerometer_.Add(value);
  // @@protoc_insertion_point(field_add:quadruped.IMUState.accelerometer)
}
inline const ::google::protobuf::RepeatedField< float >&
IMUState::accelerometer() const {
  // @@protoc_insertion_point(field_list:quadruped.IMUState.accelerometer)
  return accelerometer_;
}
inline ::google::protobuf::RepeatedField< float >*
IMUState::mutable_accelerometer() {
  // @@protoc_insertion_point(field_mutable_list:quadruped.IMUState.accelerometer)
  return &accelerometer_;
}

// repeated float rpy = 4 [packed = true];
inline int IMUState::rpy_size() const {
  return rpy_.size();
}
inline void IMUState::clear_rpy() {
  rpy_.Clear();
}
inline float IMUState::rpy(int index) const {
  // @@protoc_insertion_point(field_get:quadruped.IMUState.rpy)
  return rpy_.Get(index);
}
inline void IMUState::set_rpy(int index, float value) {
  rpy_.Set(index, value);
  // @@protoc_insertion_point(field_set:quadruped.IMUState.rpy)
}
inline void IMUState::add_rpy(float value) {
  rpy_.Add(value);
  // @@protoc_insertion_point(field_add:quadruped.IMUState.rpy)
}
inline const ::google::protobuf::RepeatedField< float >&
IMUState::rpy() const {
  // @@protoc_insertion_point(field_list:quadruped.IMUState.rpy)
  return rpy_;
}
inline ::google::protobuf::RepeatedField< float >*
IMUState::mutable_rpy() {
  // @@protoc_insertion_point(field_mutable_list:quadruped.IMUState.rpy)
  return &rpy_;
}

// optional int32 temperature = 5;
inline bool IMUState::has_temperature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IMUState::set_has_temperature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IMUState::clear_has_temperature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IMUState::clear_temperature() {
  temperature_ = 0;
  clear_has_temperature();
}
inline ::google::protobuf::int32 IMUState::temperature() const {
  // @@protoc_insertion_point(field_get:quadruped.IMUState.temperature)
  return temperature_;
}
inline void IMUState::set_temperature(::google::protobuf::int32 value) {
  set_has_temperature();
  temperature_ = value;
  // @@protoc_insertion_point(field_set:quadruped.IMUState.temperature)
}

// -------------------------------------------------------------------

// GlobalLocation

// repeated float position = 1 [packed = true];
inline int GlobalLocation::position_size() const {
  return position_.size();
}
inline void GlobalLocation::clear_position() {
  position_.Clear();
}
inline float GlobalLocation::position(int index) const {
  // @@protoc_insertion_point(field_get:quadruped.GlobalLocation.position)
  return position_.Get(index);
}
inline void GlobalLocation::set_position(int index, float value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:quadruped.GlobalLocation.position)
}
inline void GlobalLocation::add_position(float value) {
  position_.Add(value);
  // @@protoc_insertion_point(field_add:quadruped.GlobalLocation.position)
}
inline const ::google::protobuf::RepeatedField< float >&
GlobalLocation::position() const {
  // @@protoc_insertion_point(field_list:quadruped.GlobalLocation.position)
  return position_;
}
inline ::google::protobuf::RepeatedField< float >*
GlobalLocation::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:quadruped.GlobalLocation.position)
  return &position_;
}

// repeated float velocity = 2 [packed = true];
inline int GlobalLocation::velocity_size() const {
  return velocity_.size();
}
inline void GlobalLocation::clear_velocity() {
  velocity_.Clear();
}
inline float GlobalLocation::velocity(int index) const {
  // @@protoc_insertion_point(field_get:quadruped.GlobalLocation.velocity)
  return velocity_.Get(index);
}
inline void GlobalLocation::set_velocity(int index, float value) {
  velocity_.Set(index, value);
  // @@protoc_insertion_point(field_set:quadruped.GlobalLocation.velocity)
}
inline void GlobalLocation::add_velocity(float value) {
  velocity_.Add(value);
  // @@protoc_insertion_point(field_add:quadruped.GlobalLocation.velocity)
}
inline const ::google::protobuf::RepeatedField< float >&
GlobalLocation::velocity() const {
  // @@protoc_insertion_point(field_list:quadruped.GlobalLocation.velocity)
  return velocity_;
}
inline ::google::protobuf::RepeatedField< float >*
GlobalLocation::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable_list:quadruped.GlobalLocation.velocity)
  return &velocity_;
}

// optional float yaw_speed = 3;
inline bool GlobalLocation::has_yaw_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GlobalLocation::set_has_yaw_speed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GlobalLocation::clear_has_yaw_speed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GlobalLocation::clear_yaw_speed() {
  yaw_speed_ = 0;
  clear_has_yaw_speed();
}
inline float GlobalLocation::yaw_speed() const {
  // @@protoc_insertion_point(field_get:quadruped.GlobalLocation.yaw_speed)
  return yaw_speed_;
}
inline void GlobalLocation::set_yaw_speed(float value) {
  set_has_yaw_speed();
  yaw_speed_ = value;
  // @@protoc_insertion_point(field_set:quadruped.GlobalLocation.yaw_speed)
}

// -------------------------------------------------------------------

// BodyLocation

// repeated int32 foot_force = 1 [packed = true];
inline int BodyLocation::foot_force_size() const {
  return foot_force_.size();
}
inline void BodyLocation::clear_foot_force() {
  foot_force_.Clear();
}
inline ::google::protobuf::int32 BodyLocation::foot_force(int index) const {
  // @@protoc_insertion_point(field_get:quadruped.BodyLocation.foot_force)
  return foot_force_.Get(index);
}
inline void BodyLocation::set_foot_force(int index, ::google::protobuf::int32 value) {
  foot_force_.Set(index, value);
  // @@protoc_insertion_point(field_set:quadruped.BodyLocation.foot_force)
}
inline void BodyLocation::add_foot_force(::google::protobuf::int32 value) {
  foot_force_.Add(value);
  // @@protoc_insertion_point(field_add:quadruped.BodyLocation.foot_force)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BodyLocation::foot_force() const {
  // @@protoc_insertion_point(field_list:quadruped.BodyLocation.foot_force)
  return foot_force_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BodyLocation::mutable_foot_force() {
  // @@protoc_insertion_point(field_mutable_list:quadruped.BodyLocation.foot_force)
  return &foot_force_;
}

// optional float body_height = 2;
inline bool BodyLocation::has_body_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BodyLocation::set_has_body_height() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BodyLocation::clear_has_body_height() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BodyLocation::clear_body_height() {
  body_height_ = 0;
  clear_has_body_height();
}
inline float BodyLocation::body_height() const {
  // @@protoc_insertion_point(field_get:quadruped.BodyLocation.body_height)
  return body_height_;
}
inline void BodyLocation::set_body_height(float value) {
  set_has_body_height();
  body_height_ = value;
  // @@protoc_insertion_point(field_set:quadruped.BodyLocation.body_height)
}

// repeated float foot_position_body = 3 [packed = true];
inline int BodyLocation::foot_position_body_size() const {
  return foot_position_body_.size();
}
inline void BodyLocation::clear_foot_position_body() {
  foot_position_body_.Clear();
}
inline float BodyLocation::foot_position_body(int index) const {
  // @@protoc_insertion_point(field_get:quadruped.BodyLocation.foot_position_body)
  return foot_position_body_.Get(index);
}
inline void BodyLocation::set_foot_position_body(int index, float value) {
  foot_position_body_.Set(index, value);
  // @@protoc_insertion_point(field_set:quadruped.BodyLocation.foot_position_body)
}
inline void BodyLocation::add_foot_position_body(float value) {
  foot_position_body_.Add(value);
  // @@protoc_insertion_point(field_add:quadruped.BodyLocation.foot_position_body)
}
inline const ::google::protobuf::RepeatedField< float >&
BodyLocation::foot_position_body() const {
  // @@protoc_insertion_point(field_list:quadruped.BodyLocation.foot_position_body)
  return foot_position_body_;
}
inline ::google::protobuf::RepeatedField< float >*
BodyLocation::mutable_foot_position_body() {
  // @@protoc_insertion_point(field_mutable_list:quadruped.BodyLocation.foot_position_body)
  return &foot_position_body_;
}

// repeated float foot_speed_body = 4 [packed = true];
inline int BodyLocation::foot_speed_body_size() const {
  return foot_speed_body_.size();
}
inline void BodyLocation::clear_foot_speed_body() {
  foot_speed_body_.Clear();
}
inline float BodyLocation::foot_speed_body(int index) const {
  // @@protoc_insertion_point(field_get:quadruped.BodyLocation.foot_speed_body)
  return foot_speed_body_.Get(index);
}
inline void BodyLocation::set_foot_speed_body(int index, float value) {
  foot_speed_body_.Set(index, value);
  // @@protoc_insertion_point(field_set:quadruped.BodyLocation.foot_speed_body)
}
inline void BodyLocation::add_foot_speed_body(float value) {
  foot_speed_body_.Add(value);
  // @@protoc_insertion_point(field_add:quadruped.BodyLocation.foot_speed_body)
}
inline const ::google::protobuf::RepeatedField< float >&
BodyLocation::foot_speed_body() const {
  // @@protoc_insertion_point(field_list:quadruped.BodyLocation.foot_speed_body)
  return foot_speed_body_;
}
inline ::google::protobuf::RepeatedField< float >*
BodyLocation::mutable_foot_speed_body() {
  // @@protoc_insertion_point(field_mutable_list:quadruped.BodyLocation.foot_speed_body)
  return &foot_speed_body_;
}

// -------------------------------------------------------------------

// StateDatas

// optional bool obstacle_avoid_mode = 1 [default = false];
inline bool StateDatas::has_obstacle_avoid_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StateDatas::set_has_obstacle_avoid_mode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StateDatas::clear_has_obstacle_avoid_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StateDatas::clear_obstacle_avoid_mode() {
  obstacle_avoid_mode_ = false;
  clear_has_obstacle_avoid_mode();
}
inline bool StateDatas::obstacle_avoid_mode() const {
  // @@protoc_insertion_point(field_get:quadruped.StateDatas.obstacle_avoid_mode)
  return obstacle_avoid_mode_;
}
inline void StateDatas::set_obstacle_avoid_mode(bool value) {
  set_has_obstacle_avoid_mode();
  obstacle_avoid_mode_ = value;
  // @@protoc_insertion_point(field_set:quadruped.StateDatas.obstacle_avoid_mode)
}

// optional string sport_mode = 2 [default = "normal"];
inline bool StateDatas::has_sport_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StateDatas::set_has_sport_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StateDatas::clear_has_sport_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StateDatas::clear_sport_mode() {
  sport_mode_.ClearToDefaultNoArena(&::quadruped::StateDatas::_i_give_permission_to_break_this_code_default_sport_mode_.get());
  clear_has_sport_mode();
}
inline const ::std::string& StateDatas::sport_mode() const {
  // @@protoc_insertion_point(field_get:quadruped.StateDatas.sport_mode)
  return sport_mode_.GetNoArena();
}
inline void StateDatas::set_sport_mode(const ::std::string& value) {
  set_has_sport_mode();
  sport_mode_.SetNoArena(&::quadruped::StateDatas::_i_give_permission_to_break_this_code_default_sport_mode_.get(), value);
  // @@protoc_insertion_point(field_set:quadruped.StateDatas.sport_mode)
}
#if LANG_CXX11
inline void StateDatas::set_sport_mode(::std::string&& value) {
  set_has_sport_mode();
  sport_mode_.SetNoArena(
    &::quadruped::StateDatas::_i_give_permission_to_break_this_code_default_sport_mode_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quadruped.StateDatas.sport_mode)
}
#endif
inline void StateDatas::set_sport_mode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sport_mode();
  sport_mode_.SetNoArena(&::quadruped::StateDatas::_i_give_permission_to_break_this_code_default_sport_mode_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quadruped.StateDatas.sport_mode)
}
inline void StateDatas::set_sport_mode(const char* value, size_t size) {
  set_has_sport_mode();
  sport_mode_.SetNoArena(&::quadruped::StateDatas::_i_give_permission_to_break_this_code_default_sport_mode_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quadruped.StateDatas.sport_mode)
}
inline ::std::string* StateDatas::mutable_sport_mode() {
  set_has_sport_mode();
  // @@protoc_insertion_point(field_mutable:quadruped.StateDatas.sport_mode)
  return sport_mode_.MutableNoArena(&::quadruped::StateDatas::_i_give_permission_to_break_this_code_default_sport_mode_.get());
}
inline ::std::string* StateDatas::release_sport_mode() {
  // @@protoc_insertion_point(field_release:quadruped.StateDatas.sport_mode)
  if (!has_sport_mode()) {
    return NULL;
  }
  clear_has_sport_mode();
  return sport_mode_.ReleaseNonDefaultNoArena(&::quadruped::StateDatas::_i_give_permission_to_break_this_code_default_sport_mode_.get());
}
inline void StateDatas::set_allocated_sport_mode(::std::string* sport_mode) {
  if (sport_mode != NULL) {
    set_has_sport_mode();
  } else {
    clear_has_sport_mode();
  }
  sport_mode_.SetAllocatedNoArena(&::quadruped::StateDatas::_i_give_permission_to_break_this_code_default_sport_mode_.get(), sport_mode);
  // @@protoc_insertion_point(field_set_allocated:quadruped.StateDatas.sport_mode)
}

// optional int32 high_level_mode = 3 [default = 0];
inline bool StateDatas::has_high_level_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StateDatas::set_has_high_level_mode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StateDatas::clear_has_high_level_mode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StateDatas::clear_high_level_mode() {
  high_level_mode_ = 0;
  clear_has_high_level_mode();
}
inline ::google::protobuf::int32 StateDatas::high_level_mode() const {
  // @@protoc_insertion_point(field_get:quadruped.StateDatas.high_level_mode)
  return high_level_mode_;
}
inline void StateDatas::set_high_level_mode(::google::protobuf::int32 value) {
  set_has_high_level_mode();
  high_level_mode_ = value;
  // @@protoc_insertion_point(field_set:quadruped.StateDatas.high_level_mode)
}

// optional float foot_raise_height = 5 [default = 0];
inline bool StateDatas::has_foot_raise_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StateDatas::set_has_foot_raise_height() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StateDatas::clear_has_foot_raise_height() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StateDatas::clear_foot_raise_height() {
  foot_raise_height_ = 0;
  clear_has_foot_raise_height();
}
inline float StateDatas::foot_raise_height() const {
  // @@protoc_insertion_point(field_get:quadruped.StateDatas.foot_raise_height)
  return foot_raise_height_;
}
inline void StateDatas::set_foot_raise_height(float value) {
  set_has_foot_raise_height();
  foot_raise_height_ = value;
  // @@protoc_insertion_point(field_set:quadruped.StateDatas.foot_raise_height)
}

// optional int32 gait_type = 6 [default = 0];
inline bool StateDatas::has_gait_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StateDatas::set_has_gait_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StateDatas::clear_has_gait_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StateDatas::clear_gait_type() {
  gait_type_ = 0;
  clear_has_gait_type();
}
inline ::google::protobuf::int32 StateDatas::gait_type() const {
  // @@protoc_insertion_point(field_get:quadruped.StateDatas.gait_type)
  return gait_type_;
}
inline void StateDatas::set_gait_type(::google::protobuf::int32 value) {
  set_has_gait_type();
  gait_type_ = value;
  // @@protoc_insertion_point(field_set:quadruped.StateDatas.gait_type)
}

// optional .quadruped.BatteryState battery_state = 7;
inline bool StateDatas::has_battery_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StateDatas::set_has_battery_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StateDatas::clear_has_battery_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StateDatas::clear_battery_state() {
  if (battery_state_ != NULL) battery_state_->Clear();
  clear_has_battery_state();
}
inline const ::quadruped::BatteryState& StateDatas::_internal_battery_state() const {
  return *battery_state_;
}
inline const ::quadruped::BatteryState& StateDatas::battery_state() const {
  const ::quadruped::BatteryState* p = battery_state_;
  // @@protoc_insertion_point(field_get:quadruped.StateDatas.battery_state)
  return p != NULL ? *p : *reinterpret_cast<const ::quadruped::BatteryState*>(
      &::quadruped::_BatteryState_default_instance_);
}
inline ::quadruped::BatteryState* StateDatas::release_battery_state() {
  // @@protoc_insertion_point(field_release:quadruped.StateDatas.battery_state)
  clear_has_battery_state();
  ::quadruped::BatteryState* temp = battery_state_;
  battery_state_ = NULL;
  return temp;
}
inline ::quadruped::BatteryState* StateDatas::mutable_battery_state() {
  set_has_battery_state();
  if (battery_state_ == NULL) {
    auto* p = CreateMaybeMessage<::quadruped::BatteryState>(GetArenaNoVirtual());
    battery_state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:quadruped.StateDatas.battery_state)
  return battery_state_;
}
inline void StateDatas::set_allocated_battery_state(::quadruped::BatteryState* battery_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete battery_state_;
  }
  if (battery_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      battery_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, battery_state, submessage_arena);
    }
    set_has_battery_state();
  } else {
    clear_has_battery_state();
  }
  battery_state_ = battery_state;
  // @@protoc_insertion_point(field_set_allocated:quadruped.StateDatas.battery_state)
}

// optional .quadruped.IMUState imu_state = 8;
inline bool StateDatas::has_imu_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StateDatas::set_has_imu_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StateDatas::clear_has_imu_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StateDatas::clear_imu_state() {
  if (imu_state_ != NULL) imu_state_->Clear();
  clear_has_imu_state();
}
inline const ::quadruped::IMUState& StateDatas::_internal_imu_state() const {
  return *imu_state_;
}
inline const ::quadruped::IMUState& StateDatas::imu_state() const {
  const ::quadruped::IMUState* p = imu_state_;
  // @@protoc_insertion_point(field_get:quadruped.StateDatas.imu_state)
  return p != NULL ? *p : *reinterpret_cast<const ::quadruped::IMUState*>(
      &::quadruped::_IMUState_default_instance_);
}
inline ::quadruped::IMUState* StateDatas::release_imu_state() {
  // @@protoc_insertion_point(field_release:quadruped.StateDatas.imu_state)
  clear_has_imu_state();
  ::quadruped::IMUState* temp = imu_state_;
  imu_state_ = NULL;
  return temp;
}
inline ::quadruped::IMUState* StateDatas::mutable_imu_state() {
  set_has_imu_state();
  if (imu_state_ == NULL) {
    auto* p = CreateMaybeMessage<::quadruped::IMUState>(GetArenaNoVirtual());
    imu_state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:quadruped.StateDatas.imu_state)
  return imu_state_;
}
inline void StateDatas::set_allocated_imu_state(::quadruped::IMUState* imu_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete imu_state_;
  }
  if (imu_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      imu_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, imu_state, submessage_arena);
    }
    set_has_imu_state();
  } else {
    clear_has_imu_state();
  }
  imu_state_ = imu_state;
  // @@protoc_insertion_point(field_set_allocated:quadruped.StateDatas.imu_state)
}

// optional .quadruped.GlobalLocation global_location = 9;
inline bool StateDatas::has_global_location() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StateDatas::set_has_global_location() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StateDatas::clear_has_global_location() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StateDatas::clear_global_location() {
  if (global_location_ != NULL) global_location_->Clear();
  clear_has_global_location();
}
inline const ::quadruped::GlobalLocation& StateDatas::_internal_global_location() const {
  return *global_location_;
}
inline const ::quadruped::GlobalLocation& StateDatas::global_location() const {
  const ::quadruped::GlobalLocation* p = global_location_;
  // @@protoc_insertion_point(field_get:quadruped.StateDatas.global_location)
  return p != NULL ? *p : *reinterpret_cast<const ::quadruped::GlobalLocation*>(
      &::quadruped::_GlobalLocation_default_instance_);
}
inline ::quadruped::GlobalLocation* StateDatas::release_global_location() {
  // @@protoc_insertion_point(field_release:quadruped.StateDatas.global_location)
  clear_has_global_location();
  ::quadruped::GlobalLocation* temp = global_location_;
  global_location_ = NULL;
  return temp;
}
inline ::quadruped::GlobalLocation* StateDatas::mutable_global_location() {
  set_has_global_location();
  if (global_location_ == NULL) {
    auto* p = CreateMaybeMessage<::quadruped::GlobalLocation>(GetArenaNoVirtual());
    global_location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:quadruped.StateDatas.global_location)
  return global_location_;
}
inline void StateDatas::set_allocated_global_location(::quadruped::GlobalLocation* global_location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete global_location_;
  }
  if (global_location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      global_location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, global_location, submessage_arena);
    }
    set_has_global_location();
  } else {
    clear_has_global_location();
  }
  global_location_ = global_location;
  // @@protoc_insertion_point(field_set_allocated:quadruped.StateDatas.global_location)
}

// optional .quadruped.BodyLocation body_location = 10;
inline bool StateDatas::has_body_location() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StateDatas::set_has_body_location() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StateDatas::clear_has_body_location() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StateDatas::clear_body_location() {
  if (body_location_ != NULL) body_location_->Clear();
  clear_has_body_location();
}
inline const ::quadruped::BodyLocation& StateDatas::_internal_body_location() const {
  return *body_location_;
}
inline const ::quadruped::BodyLocation& StateDatas::body_location() const {
  const ::quadruped::BodyLocation* p = body_location_;
  // @@protoc_insertion_point(field_get:quadruped.StateDatas.body_location)
  return p != NULL ? *p : *reinterpret_cast<const ::quadruped::BodyLocation*>(
      &::quadruped::_BodyLocation_default_instance_);
}
inline ::quadruped::BodyLocation* StateDatas::release_body_location() {
  // @@protoc_insertion_point(field_release:quadruped.StateDatas.body_location)
  clear_has_body_location();
  ::quadruped::BodyLocation* temp = body_location_;
  body_location_ = NULL;
  return temp;
}
inline ::quadruped::BodyLocation* StateDatas::mutable_body_location() {
  set_has_body_location();
  if (body_location_ == NULL) {
    auto* p = CreateMaybeMessage<::quadruped::BodyLocation>(GetArenaNoVirtual());
    body_location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:quadruped.StateDatas.body_location)
  return body_location_;
}
inline void StateDatas::set_allocated_body_location(::quadruped::BodyLocation* body_location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete body_location_;
  }
  if (body_location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      body_location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, body_location, submessage_arena);
    }
    set_has_body_location();
  } else {
    clear_has_body_location();
  }
  body_location_ = body_location;
  // @@protoc_insertion_point(field_set_allocated:quadruped.StateDatas.body_location)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace quadruped

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_proto_2fstate_5fdatas_2eproto
